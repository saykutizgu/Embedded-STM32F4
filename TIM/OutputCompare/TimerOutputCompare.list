
TimerOutputCompare.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001074  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080011fc  08001204  00011204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080011fc  080011fc  000111fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001200  08001200  00011200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00011204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00011204  2**0
                  CONTENTS
  7 .bss          00000058  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000058  20000058  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00011204  2**0
                  CONTENTS, READONLY
 10 .debug_info   00004451  00000000  00000000  00011234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000009af  00000000  00000000  00015685  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000628  00000000  00000000  00016038  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005b0  00000000  00000000  00016660  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001d59  00000000  00000000  00016c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001fa4  00000000  00000000  00018969  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0001a90d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001a78  00000000  00000000  0001a98c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0001c404  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080011e4 	.word	0x080011e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080011e4 	.word	0x080011e4

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f003 031f 	and.w	r3, r3, #31
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000258:	490b      	ldr	r1, [pc, #44]	; (8000288 <NVIC_Init+0xc0>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f003 031f 	and.w	r3, r3, #31
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800028c:	b480      	push	{r7}
 800028e:	b087      	sub	sp, #28
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000296:	2300      	movs	r3, #0
 8000298:	617b      	str	r3, [r7, #20]
 800029a:	2300      	movs	r3, #0
 800029c:	613b      	str	r3, [r7, #16]
 800029e:	2300      	movs	r3, #0
 80002a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]
 80002a6:	e076      	b.n	8000396 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002a8:	2201      	movs	r2, #1
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	fa02 f303 	lsl.w	r3, r2, r3
 80002b0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	681a      	ldr	r2, [r3, #0]
 80002b6:	693b      	ldr	r3, [r7, #16]
 80002b8:	4013      	ands	r3, r2
 80002ba:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80002bc:	68fa      	ldr	r2, [r7, #12]
 80002be:	693b      	ldr	r3, [r7, #16]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	d165      	bne.n	8000390 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681a      	ldr	r2, [r3, #0]
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	005b      	lsls	r3, r3, #1
 80002cc:	2103      	movs	r1, #3
 80002ce:	fa01 f303 	lsl.w	r3, r1, r3
 80002d2:	43db      	mvns	r3, r3
 80002d4:	401a      	ands	r2, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	791b      	ldrb	r3, [r3, #4]
 80002e2:	4619      	mov	r1, r3
 80002e4:	697b      	ldr	r3, [r7, #20]
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	fa01 f303 	lsl.w	r3, r1, r3
 80002ec:	431a      	orrs	r2, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	791b      	ldrb	r3, [r3, #4]
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d003      	beq.n	8000302 <GPIO_Init+0x76>
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	791b      	ldrb	r3, [r3, #4]
 80002fe:	2b02      	cmp	r3, #2
 8000300:	d12e      	bne.n	8000360 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	689a      	ldr	r2, [r3, #8]
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	005b      	lsls	r3, r3, #1
 800030a:	2103      	movs	r1, #3
 800030c:	fa01 f303 	lsl.w	r3, r1, r3
 8000310:	43db      	mvns	r3, r3
 8000312:	401a      	ands	r2, r3
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	689a      	ldr	r2, [r3, #8]
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	795b      	ldrb	r3, [r3, #5]
 8000320:	4619      	mov	r1, r3
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	fa01 f303 	lsl.w	r3, r1, r3
 800032a:	431a      	orrs	r2, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	685a      	ldr	r2, [r3, #4]
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	b29b      	uxth	r3, r3
 8000338:	4619      	mov	r1, r3
 800033a:	2301      	movs	r3, #1
 800033c:	408b      	lsls	r3, r1
 800033e:	43db      	mvns	r3, r3
 8000340:	401a      	ands	r2, r3
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	683a      	ldr	r2, [r7, #0]
 800034c:	7992      	ldrb	r2, [r2, #6]
 800034e:	4611      	mov	r1, r2
 8000350:	697a      	ldr	r2, [r7, #20]
 8000352:	b292      	uxth	r2, r2
 8000354:	fa01 f202 	lsl.w	r2, r1, r2
 8000358:	b292      	uxth	r2, r2
 800035a:	431a      	orrs	r2, r3
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	68da      	ldr	r2, [r3, #12]
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	b29b      	uxth	r3, r3
 8000368:	005b      	lsls	r3, r3, #1
 800036a:	2103      	movs	r1, #3
 800036c:	fa01 f303 	lsl.w	r3, r1, r3
 8000370:	43db      	mvns	r3, r3
 8000372:	401a      	ands	r2, r3
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	68da      	ldr	r2, [r3, #12]
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	79db      	ldrb	r3, [r3, #7]
 8000380:	4619      	mov	r1, r3
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	005b      	lsls	r3, r3, #1
 8000386:	fa01 f303 	lsl.w	r3, r1, r3
 800038a:	431a      	orrs	r2, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	3301      	adds	r3, #1
 8000394:	617b      	str	r3, [r7, #20]
 8000396:	697b      	ldr	r3, [r7, #20]
 8000398:	2b0f      	cmp	r3, #15
 800039a:	d985      	bls.n	80002a8 <GPIO_Init+0x1c>
    }
  }
}
 800039c:	bf00      	nop
 800039e:	371c      	adds	r7, #28
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	807b      	strh	r3, [r7, #2]
 80003b4:	4613      	mov	r3, r2
 80003b6:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80003bc:	2300      	movs	r3, #0
 80003be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003c0:	787a      	ldrb	r2, [r7, #1]
 80003c2:	887b      	ldrh	r3, [r7, #2]
 80003c4:	f003 0307 	and.w	r3, r3, #7
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	fa02 f303 	lsl.w	r3, r2, r3
 80003ce:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003d0:	887b      	ldrh	r3, [r7, #2]
 80003d2:	08db      	lsrs	r3, r3, #3
 80003d4:	b29b      	uxth	r3, r3
 80003d6:	4618      	mov	r0, r3
 80003d8:	887b      	ldrh	r3, [r7, #2]
 80003da:	08db      	lsrs	r3, r3, #3
 80003dc:	b29b      	uxth	r3, r3
 80003de:	461a      	mov	r2, r3
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	3208      	adds	r2, #8
 80003e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003e8:	887b      	ldrh	r3, [r7, #2]
 80003ea:	f003 0307 	and.w	r3, r3, #7
 80003ee:	009b      	lsls	r3, r3, #2
 80003f0:	210f      	movs	r1, #15
 80003f2:	fa01 f303 	lsl.w	r3, r1, r3
 80003f6:	43db      	mvns	r3, r3
 80003f8:	ea02 0103 	and.w	r1, r2, r3
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	f100 0208 	add.w	r2, r0, #8
 8000402:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000406:	887b      	ldrh	r3, [r7, #2]
 8000408:	08db      	lsrs	r3, r3, #3
 800040a:	b29b      	uxth	r3, r3
 800040c:	461a      	mov	r2, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	3208      	adds	r2, #8
 8000412:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	4313      	orrs	r3, r2
 800041a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800041c:	887b      	ldrh	r3, [r7, #2]
 800041e:	08db      	lsrs	r3, r3, #3
 8000420:	b29b      	uxth	r3, r3
 8000422:	461a      	mov	r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	3208      	adds	r2, #8
 8000428:	68b9      	ldr	r1, [r7, #8]
 800042a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800042e:	bf00      	nop
 8000430:	3714      	adds	r7, #20
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
	...

0800043c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	460b      	mov	r3, r1
 8000446:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000448:	78fb      	ldrb	r3, [r7, #3]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d006      	beq.n	800045c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800044e:	490a      	ldr	r1, [pc, #40]	; (8000478 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000450:	4b09      	ldr	r3, [pc, #36]	; (8000478 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4313      	orrs	r3, r2
 8000458:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800045a:	e006      	b.n	800046a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800045c:	4906      	ldr	r1, [pc, #24]	; (8000478 <RCC_AHB1PeriphClockCmd+0x3c>)
 800045e:	4b06      	ldr	r3, [pc, #24]	; (8000478 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	43db      	mvns	r3, r3
 8000466:	4013      	ands	r3, r2
 8000468:	630b      	str	r3, [r1, #48]	; 0x30
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	40023800 	.word	0x40023800

0800047c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	460b      	mov	r3, r1
 8000486:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000488:	78fb      	ldrb	r3, [r7, #3]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d006      	beq.n	800049c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800048e:	490a      	ldr	r1, [pc, #40]	; (80004b8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000490:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000492:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4313      	orrs	r3, r2
 8000498:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800049a:	e006      	b.n	80004aa <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800049c:	4906      	ldr	r1, [pc, #24]	; (80004b8 <RCC_APB1PeriphClockCmd+0x3c>)
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <RCC_APB1PeriphClockCmd+0x3c>)
 80004a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	43db      	mvns	r3, r3
 80004a6:	4013      	ands	r3, r2
 80004a8:	640b      	str	r3, [r1, #64]	; 0x40
}
 80004aa:	bf00      	nop
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40023800 	.word	0x40023800

080004bc <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80004bc:	b480      	push	{r7}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	881b      	ldrh	r3, [r3, #0]
 80004ce:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4a29      	ldr	r2, [pc, #164]	; (8000578 <TIM_TimeBaseInit+0xbc>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d013      	beq.n	8000500 <TIM_TimeBaseInit+0x44>
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a28      	ldr	r2, [pc, #160]	; (800057c <TIM_TimeBaseInit+0xc0>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d00f      	beq.n	8000500 <TIM_TimeBaseInit+0x44>
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004e6:	d00b      	beq.n	8000500 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4a25      	ldr	r2, [pc, #148]	; (8000580 <TIM_TimeBaseInit+0xc4>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d007      	beq.n	8000500 <TIM_TimeBaseInit+0x44>
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4a24      	ldr	r2, [pc, #144]	; (8000584 <TIM_TimeBaseInit+0xc8>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d003      	beq.n	8000500 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4a23      	ldr	r2, [pc, #140]	; (8000588 <TIM_TimeBaseInit+0xcc>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d108      	bne.n	8000512 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000500:	89fb      	ldrh	r3, [r7, #14]
 8000502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000506:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	885a      	ldrh	r2, [r3, #2]
 800050c:	89fb      	ldrh	r3, [r7, #14]
 800050e:	4313      	orrs	r3, r2
 8000510:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4a1d      	ldr	r2, [pc, #116]	; (800058c <TIM_TimeBaseInit+0xd0>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d00c      	beq.n	8000534 <TIM_TimeBaseInit+0x78>
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4a1c      	ldr	r2, [pc, #112]	; (8000590 <TIM_TimeBaseInit+0xd4>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d008      	beq.n	8000534 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000522:	89fb      	ldrh	r3, [r7, #14]
 8000524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000528:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	891a      	ldrh	r2, [r3, #8]
 800052e:	89fb      	ldrh	r3, [r7, #14]
 8000530:	4313      	orrs	r3, r2
 8000532:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	89fa      	ldrh	r2, [r7, #14]
 8000538:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	685a      	ldr	r2, [r3, #4]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	881a      	ldrh	r2, [r3, #0]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <TIM_TimeBaseInit+0xbc>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d003      	beq.n	800055a <TIM_TimeBaseInit+0x9e>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4a09      	ldr	r2, [pc, #36]	; (800057c <TIM_TimeBaseInit+0xc0>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d104      	bne.n	8000564 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	7a9b      	ldrb	r3, [r3, #10]
 800055e:	b29a      	uxth	r2, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2201      	movs	r2, #1
 8000568:	829a      	strh	r2, [r3, #20]
}
 800056a:	bf00      	nop
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	40010000 	.word	0x40010000
 800057c:	40010400 	.word	0x40010400
 8000580:	40000400 	.word	0x40000400
 8000584:	40000800 	.word	0x40000800
 8000588:	40000c00 	.word	0x40000c00
 800058c:	40001000 	.word	0x40001000
 8000590:	40001400 	.word	0x40001400

08000594 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d008      	beq.n	80005d0 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	881b      	ldrh	r3, [r3, #0]
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80005ce:	e007      	b.n	80005e0 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	881b      	ldrh	r3, [r3, #0]
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	f023 0301 	bic.w	r3, r3, #1
 80005da:	b29a      	uxth	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	801a      	strh	r2, [r3, #0]
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	817b      	strh	r3, [r7, #10]
 80005fa:	2300      	movs	r3, #0
 80005fc:	81fb      	strh	r3, [r7, #14]
 80005fe:	2300      	movs	r3, #0
 8000600:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	8c1b      	ldrh	r3, [r3, #32]
 8000606:	b29b      	uxth	r3, r3
 8000608:	f023 0301 	bic.w	r3, r3, #1
 800060c:	b29a      	uxth	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	8c1b      	ldrh	r3, [r3, #32]
 8000616:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	889b      	ldrh	r3, [r3, #4]
 800061c:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	8b1b      	ldrh	r3, [r3, #24]
 8000622:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 8000624:	897b      	ldrh	r3, [r7, #10]
 8000626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800062a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800062c:	897b      	ldrh	r3, [r7, #10]
 800062e:	f023 0303 	bic.w	r3, r3, #3
 8000632:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	881a      	ldrh	r2, [r3, #0]
 8000638:	897b      	ldrh	r3, [r7, #10]
 800063a:	4313      	orrs	r3, r2
 800063c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800063e:	89fb      	ldrh	r3, [r7, #14]
 8000640:	f023 0302 	bic.w	r3, r3, #2
 8000644:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	899a      	ldrh	r2, [r3, #12]
 800064a:	89fb      	ldrh	r3, [r7, #14]
 800064c:	4313      	orrs	r3, r2
 800064e:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	885a      	ldrh	r2, [r3, #2]
 8000654:	89fb      	ldrh	r3, [r7, #14]
 8000656:	4313      	orrs	r3, r2
 8000658:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4a1e      	ldr	r2, [pc, #120]	; (80006d8 <TIM_OC1Init+0xec>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d003      	beq.n	800066a <TIM_OC1Init+0x7e>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a1d      	ldr	r2, [pc, #116]	; (80006dc <TIM_OC1Init+0xf0>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d123      	bne.n	80006b2 <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800066a:	89fb      	ldrh	r3, [r7, #14]
 800066c:	f023 0308 	bic.w	r3, r3, #8
 8000670:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	89da      	ldrh	r2, [r3, #14]
 8000676:	89fb      	ldrh	r3, [r7, #14]
 8000678:	4313      	orrs	r3, r2
 800067a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 800067c:	89fb      	ldrh	r3, [r7, #14]
 800067e:	f023 0304 	bic.w	r3, r3, #4
 8000682:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	889a      	ldrh	r2, [r3, #4]
 8000688:	89fb      	ldrh	r3, [r7, #14]
 800068a:	4313      	orrs	r3, r2
 800068c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 800068e:	89bb      	ldrh	r3, [r7, #12]
 8000690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000694:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8000696:	89bb      	ldrh	r3, [r7, #12]
 8000698:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800069c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	8a1a      	ldrh	r2, [r3, #16]
 80006a2:	89bb      	ldrh	r3, [r7, #12]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	8a5a      	ldrh	r2, [r3, #18]
 80006ac:	89bb      	ldrh	r3, [r7, #12]
 80006ae:	4313      	orrs	r3, r2
 80006b0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	89ba      	ldrh	r2, [r7, #12]
 80006b6:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	897a      	ldrh	r2, [r7, #10]
 80006bc:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	689a      	ldr	r2, [r3, #8]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	89fa      	ldrh	r2, [r7, #14]
 80006ca:	841a      	strh	r2, [r3, #32]
}
 80006cc:	bf00      	nop
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	40010000 	.word	0x40010000
 80006dc:	40010400 	.word	0x40010400

080006e0 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	817b      	strh	r3, [r7, #10]
 80006ee:	2300      	movs	r3, #0
 80006f0:	81fb      	strh	r3, [r7, #14]
 80006f2:	2300      	movs	r3, #0
 80006f4:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	8c1b      	ldrh	r3, [r3, #32]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	f023 0310 	bic.w	r3, r3, #16
 8000700:	b29a      	uxth	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	8c1b      	ldrh	r3, [r3, #32]
 800070a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	889b      	ldrh	r3, [r3, #4]
 8000710:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	8b1b      	ldrh	r3, [r3, #24]
 8000716:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 8000718:	897b      	ldrh	r3, [r7, #10]
 800071a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800071e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8000720:	897b      	ldrh	r3, [r7, #10]
 8000722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000726:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	881b      	ldrh	r3, [r3, #0]
 800072c:	021b      	lsls	r3, r3, #8
 800072e:	b29a      	uxth	r2, r3
 8000730:	897b      	ldrh	r3, [r7, #10]
 8000732:	4313      	orrs	r3, r2
 8000734:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8000736:	89fb      	ldrh	r3, [r7, #14]
 8000738:	f023 0320 	bic.w	r3, r3, #32
 800073c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	899b      	ldrh	r3, [r3, #12]
 8000742:	011b      	lsls	r3, r3, #4
 8000744:	b29a      	uxth	r2, r3
 8000746:	89fb      	ldrh	r3, [r7, #14]
 8000748:	4313      	orrs	r3, r2
 800074a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	885b      	ldrh	r3, [r3, #2]
 8000750:	011b      	lsls	r3, r3, #4
 8000752:	b29a      	uxth	r2, r3
 8000754:	89fb      	ldrh	r3, [r7, #14]
 8000756:	4313      	orrs	r3, r2
 8000758:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4a22      	ldr	r2, [pc, #136]	; (80007e8 <TIM_OC2Init+0x108>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d003      	beq.n	800076a <TIM_OC2Init+0x8a>
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4a21      	ldr	r2, [pc, #132]	; (80007ec <TIM_OC2Init+0x10c>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d12b      	bne.n	80007c2 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800076a:	89fb      	ldrh	r3, [r7, #14]
 800076c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000770:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	89db      	ldrh	r3, [r3, #14]
 8000776:	011b      	lsls	r3, r3, #4
 8000778:	b29a      	uxth	r2, r3
 800077a:	89fb      	ldrh	r3, [r7, #14]
 800077c:	4313      	orrs	r3, r2
 800077e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8000780:	89fb      	ldrh	r3, [r7, #14]
 8000782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000786:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	889b      	ldrh	r3, [r3, #4]
 800078c:	011b      	lsls	r3, r3, #4
 800078e:	b29a      	uxth	r2, r3
 8000790:	89fb      	ldrh	r3, [r7, #14]
 8000792:	4313      	orrs	r3, r2
 8000794:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 8000796:	89bb      	ldrh	r3, [r7, #12]
 8000798:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800079c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 800079e:	89bb      	ldrh	r3, [r7, #12]
 80007a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007a4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	8a1b      	ldrh	r3, [r3, #16]
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	89bb      	ldrh	r3, [r7, #12]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	8a5b      	ldrh	r3, [r3, #18]
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	89bb      	ldrh	r3, [r7, #12]
 80007be:	4313      	orrs	r3, r2
 80007c0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	89ba      	ldrh	r2, [r7, #12]
 80007c6:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	897a      	ldrh	r2, [r7, #10]
 80007cc:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	689a      	ldr	r2, [r3, #8]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	89fa      	ldrh	r2, [r7, #14]
 80007da:	841a      	strh	r2, [r3, #32]
}
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	40010000 	.word	0x40010000
 80007ec:	40010400 	.word	0x40010400

080007f0 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	817b      	strh	r3, [r7, #10]
 80007fe:	2300      	movs	r3, #0
 8000800:	81fb      	strh	r3, [r7, #14]
 8000802:	2300      	movs	r3, #0
 8000804:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	8c1b      	ldrh	r3, [r3, #32]
 800080a:	b29b      	uxth	r3, r3
 800080c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000810:	b29a      	uxth	r2, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	8c1b      	ldrh	r3, [r3, #32]
 800081a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	889b      	ldrh	r3, [r3, #4]
 8000820:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	8b9b      	ldrh	r3, [r3, #28]
 8000826:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8000828:	897b      	ldrh	r3, [r7, #10]
 800082a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800082e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8000830:	897b      	ldrh	r3, [r7, #10]
 8000832:	f023 0303 	bic.w	r3, r3, #3
 8000836:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	881a      	ldrh	r2, [r3, #0]
 800083c:	897b      	ldrh	r3, [r7, #10]
 800083e:	4313      	orrs	r3, r2
 8000840:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8000842:	89fb      	ldrh	r3, [r7, #14]
 8000844:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000848:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	899b      	ldrh	r3, [r3, #12]
 800084e:	021b      	lsls	r3, r3, #8
 8000850:	b29a      	uxth	r2, r3
 8000852:	89fb      	ldrh	r3, [r7, #14]
 8000854:	4313      	orrs	r3, r2
 8000856:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	885b      	ldrh	r3, [r3, #2]
 800085c:	021b      	lsls	r3, r3, #8
 800085e:	b29a      	uxth	r2, r3
 8000860:	89fb      	ldrh	r3, [r7, #14]
 8000862:	4313      	orrs	r3, r2
 8000864:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a22      	ldr	r2, [pc, #136]	; (80008f4 <TIM_OC3Init+0x104>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d003      	beq.n	8000876 <TIM_OC3Init+0x86>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4a21      	ldr	r2, [pc, #132]	; (80008f8 <TIM_OC3Init+0x108>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d12b      	bne.n	80008ce <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8000876:	89fb      	ldrh	r3, [r7, #14]
 8000878:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800087c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	89db      	ldrh	r3, [r3, #14]
 8000882:	021b      	lsls	r3, r3, #8
 8000884:	b29a      	uxth	r2, r3
 8000886:	89fb      	ldrh	r3, [r7, #14]
 8000888:	4313      	orrs	r3, r2
 800088a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 800088c:	89fb      	ldrh	r3, [r7, #14]
 800088e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000892:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	889b      	ldrh	r3, [r3, #4]
 8000898:	021b      	lsls	r3, r3, #8
 800089a:	b29a      	uxth	r2, r3
 800089c:	89fb      	ldrh	r3, [r7, #14]
 800089e:	4313      	orrs	r3, r2
 80008a0:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 80008a2:	89bb      	ldrh	r3, [r7, #12]
 80008a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008a8:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80008aa:	89bb      	ldrh	r3, [r7, #12]
 80008ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008b0:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	8a1b      	ldrh	r3, [r3, #16]
 80008b6:	011b      	lsls	r3, r3, #4
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	89bb      	ldrh	r3, [r7, #12]
 80008bc:	4313      	orrs	r3, r2
 80008be:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	8a5b      	ldrh	r3, [r3, #18]
 80008c4:	011b      	lsls	r3, r3, #4
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	89bb      	ldrh	r3, [r7, #12]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	89ba      	ldrh	r2, [r7, #12]
 80008d2:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	897a      	ldrh	r2, [r7, #10]
 80008d8:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	689a      	ldr	r2, [r3, #8]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	89fa      	ldrh	r2, [r7, #14]
 80008e6:	841a      	strh	r2, [r3, #32]
}
 80008e8:	bf00      	nop
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	40010000 	.word	0x40010000
 80008f8:	40010400 	.word	0x40010400

080008fc <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d10f      	bne.n	800092e <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	8859      	ldrh	r1, [r3, #2]
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	889a      	ldrh	r2, [r3, #4]
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	891b      	ldrh	r3, [r3, #8]
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f000 f915 	bl	8000b4a <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	88db      	ldrh	r3, [r3, #6]
 8000924:	4619      	mov	r1, r3
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f000 f83c 	bl	80009a4 <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800092c:	e036      	b.n	800099c <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	2b04      	cmp	r3, #4
 8000934:	d10f      	bne.n	8000956 <TIM_ICInit+0x5a>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	8859      	ldrh	r1, [r3, #2]
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	889a      	ldrh	r2, [r3, #4]
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	891b      	ldrh	r3, [r3, #8]
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f000 f944 	bl	8000bd0 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	88db      	ldrh	r3, [r3, #6]
 800094c:	4619      	mov	r1, r3
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f000 f844 	bl	80009dc <TIM_SetIC2Prescaler>
}
 8000954:	e022      	b.n	800099c <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	2b08      	cmp	r3, #8
 800095c:	d10f      	bne.n	800097e <TIM_ICInit+0x82>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	8859      	ldrh	r1, [r3, #2]
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	889a      	ldrh	r2, [r3, #4]
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	891b      	ldrh	r3, [r3, #8]
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f000 f97d 	bl	8000c6a <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	88db      	ldrh	r3, [r3, #6]
 8000974:	4619      	mov	r1, r3
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f000 f84e 	bl	8000a18 <TIM_SetIC3Prescaler>
}
 800097c:	e00e      	b.n	800099c <TIM_ICInit+0xa0>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	8859      	ldrh	r1, [r3, #2]
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	889a      	ldrh	r2, [r3, #4]
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	891b      	ldrh	r3, [r3, #8]
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f000 f9b5 	bl	8000cfa <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	88db      	ldrh	r3, [r3, #6]
 8000994:	4619      	mov	r1, r3
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f000 f85a 	bl	8000a50 <TIM_SetIC4Prescaler>
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	460b      	mov	r3, r1
 80009ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	8b1b      	ldrh	r3, [r3, #24]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	f023 030c 	bic.w	r3, r3, #12
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	8b1b      	ldrh	r3, [r3, #24]
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	887b      	ldrh	r3, [r7, #2]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	831a      	strh	r2, [r3, #24]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	460b      	mov	r3, r1
 80009e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	8b1b      	ldrh	r3, [r3, #24]
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	8b1b      	ldrh	r3, [r3, #24]
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	887b      	ldrh	r3, [r7, #2]
 8000a00:	021b      	lsls	r3, r3, #8
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	4313      	orrs	r3, r2
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	831a      	strh	r2, [r3, #24]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	8b9b      	ldrh	r3, [r3, #28]
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	f023 030c 	bic.w	r3, r3, #12
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	8b9b      	ldrh	r3, [r3, #28]
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	887b      	ldrh	r3, [r7, #2]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	839a      	strh	r2, [r3, #28]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	8b9b      	ldrh	r3, [r3, #28]
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	8b9b      	ldrh	r3, [r3, #28]
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	887b      	ldrh	r3, [r7, #2]
 8000a74:	021b      	lsls	r3, r3, #8
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	839a      	strh	r2, [r3, #28]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	460b      	mov	r3, r1
 8000a96:	807b      	strh	r3, [r7, #2]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a9c:	787b      	ldrb	r3, [r7, #1]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d008      	beq.n	8000ab4 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	899b      	ldrh	r3, [r3, #12]
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	887b      	ldrh	r3, [r7, #2]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000ab2:	e009      	b.n	8000ac8 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	899b      	ldrh	r3, [r3, #12]
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	887b      	ldrh	r3, [r7, #2]
 8000abc:	43db      	mvns	r3, r3
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	819a      	strh	r2, [r3, #12]
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	81bb      	strh	r3, [r7, #12]
 8000ae8:	2300      	movs	r3, #0
 8000aea:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	8a1b      	ldrh	r3, [r3, #16]
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	887b      	ldrh	r3, [r7, #2]
 8000af4:	4013      	ands	r3, r2
 8000af6:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	899b      	ldrh	r3, [r3, #12]
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	887b      	ldrh	r3, [r7, #2]
 8000b00:	4013      	ands	r3, r2
 8000b02:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000b04:	89bb      	ldrh	r3, [r7, #12]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d005      	beq.n	8000b16 <TIM_GetITStatus+0x42>
 8000b0a:	897b      	ldrh	r3, [r7, #10]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d002      	beq.n	8000b16 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000b10:	2301      	movs	r3, #1
 8000b12:	73fb      	strb	r3, [r7, #15]
 8000b14:	e001      	b.n	8000b1a <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8000b16:	2300      	movs	r3, #0
 8000b18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000b34:	887b      	ldrh	r3, [r7, #2]
 8000b36:	43db      	mvns	r3, r3
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	821a      	strh	r2, [r3, #16]
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b087      	sub	sp, #28
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	60f8      	str	r0, [r7, #12]
 8000b52:	4608      	mov	r0, r1
 8000b54:	4611      	mov	r1, r2
 8000b56:	461a      	mov	r2, r3
 8000b58:	4603      	mov	r3, r0
 8000b5a:	817b      	strh	r3, [r7, #10]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	813b      	strh	r3, [r7, #8]
 8000b60:	4613      	mov	r3, r2
 8000b62:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	82fb      	strh	r3, [r7, #22]
 8000b68:	2300      	movs	r3, #0
 8000b6a:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	8c1b      	ldrh	r3, [r3, #32]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	f023 0301 	bic.w	r3, r3, #1
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	8b1b      	ldrh	r3, [r3, #24]
 8000b80:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	8c1b      	ldrh	r3, [r3, #32]
 8000b86:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8000b88:	8afb      	ldrh	r3, [r7, #22]
 8000b8a:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8000b8e:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8000b90:	88fb      	ldrh	r3, [r7, #6]
 8000b92:	011b      	lsls	r3, r3, #4
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	893b      	ldrh	r3, [r7, #8]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	8afb      	ldrh	r3, [r7, #22]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000ba2:	8abb      	ldrh	r3, [r7, #20]
 8000ba4:	f023 030a 	bic.w	r3, r3, #10
 8000ba8:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8000baa:	897a      	ldrh	r2, [r7, #10]
 8000bac:	8abb      	ldrh	r3, [r7, #20]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	8afa      	ldrh	r2, [r7, #22]
 8000bbc:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	8aba      	ldrh	r2, [r7, #20]
 8000bc2:	841a      	strh	r2, [r3, #32]
}
 8000bc4:	bf00      	nop
 8000bc6:	371c      	adds	r7, #28
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b087      	sub	sp, #28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	4608      	mov	r0, r1
 8000bda:	4611      	mov	r1, r2
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4603      	mov	r3, r0
 8000be0:	817b      	strh	r3, [r7, #10]
 8000be2:	460b      	mov	r3, r1
 8000be4:	813b      	strh	r3, [r7, #8]
 8000be6:	4613      	mov	r3, r2
 8000be8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	82fb      	strh	r3, [r7, #22]
 8000bee:	2300      	movs	r3, #0
 8000bf0:	82bb      	strh	r3, [r7, #20]
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	8c1b      	ldrh	r3, [r3, #32]
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	f023 0310 	bic.w	r3, r3, #16
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	8b1b      	ldrh	r3, [r3, #24]
 8000c0a:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	8c1b      	ldrh	r3, [r3, #32]
 8000c10:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8000c12:	897b      	ldrh	r3, [r7, #10]
 8000c14:	011b      	lsls	r3, r3, #4
 8000c16:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8000c18:	8afb      	ldrh	r3, [r7, #22]
 8000c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c1e:	051b      	lsls	r3, r3, #20
 8000c20:	0d1b      	lsrs	r3, r3, #20
 8000c22:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8000c24:	88fb      	ldrh	r3, [r7, #6]
 8000c26:	031b      	lsls	r3, r3, #12
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	8afb      	ldrh	r3, [r7, #22]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8000c30:	893b      	ldrh	r3, [r7, #8]
 8000c32:	021b      	lsls	r3, r3, #8
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	8afb      	ldrh	r3, [r7, #22]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000c3c:	8abb      	ldrh	r3, [r7, #20]
 8000c3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8000c42:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8000c44:	8a7a      	ldrh	r2, [r7, #18]
 8000c46:	8abb      	ldrh	r3, [r7, #20]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	f043 0310 	orr.w	r3, r3, #16
 8000c50:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	8afa      	ldrh	r2, [r7, #22]
 8000c56:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	8aba      	ldrh	r2, [r7, #20]
 8000c5c:	841a      	strh	r2, [r3, #32]
}
 8000c5e:	bf00      	nop
 8000c60:	371c      	adds	r7, #28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b087      	sub	sp, #28
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	60f8      	str	r0, [r7, #12]
 8000c72:	4608      	mov	r0, r1
 8000c74:	4611      	mov	r1, r2
 8000c76:	461a      	mov	r2, r3
 8000c78:	4603      	mov	r3, r0
 8000c7a:	817b      	strh	r3, [r7, #10]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	813b      	strh	r3, [r7, #8]
 8000c80:	4613      	mov	r3, r2
 8000c82:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	82fb      	strh	r3, [r7, #22]
 8000c88:	2300      	movs	r3, #0
 8000c8a:	82bb      	strh	r3, [r7, #20]
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	8c1b      	ldrh	r3, [r3, #32]
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	8b9b      	ldrh	r3, [r3, #28]
 8000ca4:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	8c1b      	ldrh	r3, [r3, #32]
 8000caa:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8000cac:	897b      	ldrh	r3, [r7, #10]
 8000cae:	021b      	lsls	r3, r3, #8
 8000cb0:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8000cb2:	8afb      	ldrh	r3, [r7, #22]
 8000cb4:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8000cb8:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8000cba:	88fb      	ldrh	r3, [r7, #6]
 8000cbc:	011b      	lsls	r3, r3, #4
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	893b      	ldrh	r3, [r7, #8]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	8afb      	ldrh	r3, [r7, #22]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8000ccc:	8abb      	ldrh	r3, [r7, #20]
 8000cce:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8000cd2:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8000cd4:	8a7a      	ldrh	r2, [r7, #18]
 8000cd6:	8abb      	ldrh	r3, [r7, #20]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce0:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	8afa      	ldrh	r2, [r7, #22]
 8000ce6:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	8aba      	ldrh	r2, [r7, #20]
 8000cec:	841a      	strh	r2, [r3, #32]
}
 8000cee:	bf00      	nop
 8000cf0:	371c      	adds	r7, #28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b087      	sub	sp, #28
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	60f8      	str	r0, [r7, #12]
 8000d02:	4608      	mov	r0, r1
 8000d04:	4611      	mov	r1, r2
 8000d06:	461a      	mov	r2, r3
 8000d08:	4603      	mov	r3, r0
 8000d0a:	817b      	strh	r3, [r7, #10]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	813b      	strh	r3, [r7, #8]
 8000d10:	4613      	mov	r3, r2
 8000d12:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	82fb      	strh	r3, [r7, #22]
 8000d18:	2300      	movs	r3, #0
 8000d1a:	82bb      	strh	r3, [r7, #20]
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	8c1b      	ldrh	r3, [r3, #32]
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	8b9b      	ldrh	r3, [r3, #28]
 8000d34:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	8c1b      	ldrh	r3, [r3, #32]
 8000d3a:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8000d3c:	897b      	ldrh	r3, [r7, #10]
 8000d3e:	031b      	lsls	r3, r3, #12
 8000d40:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8000d42:	8afb      	ldrh	r3, [r7, #22]
 8000d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d48:	051b      	lsls	r3, r3, #20
 8000d4a:	0d1b      	lsrs	r3, r3, #20
 8000d4c:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8000d4e:	893b      	ldrh	r3, [r7, #8]
 8000d50:	021b      	lsls	r3, r3, #8
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	8afb      	ldrh	r3, [r7, #22]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8000d5a:	88fb      	ldrh	r3, [r7, #6]
 8000d5c:	031b      	lsls	r3, r3, #12
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	8afb      	ldrh	r3, [r7, #22]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8000d66:	8abb      	ldrh	r3, [r7, #20]
 8000d68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d6c:	045b      	lsls	r3, r3, #17
 8000d6e:	0c5b      	lsrs	r3, r3, #17
 8000d70:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8000d72:	8a7a      	ldrh	r2, [r7, #18]
 8000d74:	8abb      	ldrh	r3, [r7, #20]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d7e:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	8afa      	ldrh	r2, [r7, #22]
 8000d84:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	8aba      	ldrh	r2, [r7, #20]
 8000d8a:	841a      	strh	r2, [r3, #32]
}
 8000d8c:	bf00      	nop
 8000d8e:	371c      	adds	r7, #28
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <main>:
TIM_OCInitTypeDef TIM_OCInitStruct;
GPIO_InitTypeDef GPIO_initStruct;
TIM_ICInitTypeDef TIM_ICInitStruct;

int main(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	INITIALIZE_HARDWARE_DRIVERS();                                                                               // Initialize Drivers
 8000d9c:	f000 f802 	bl	8000da4 <INITIALIZE_HARDWARE_DRIVERS>
 while (1)
 8000da0:	e7fe      	b.n	8000da0 <main+0x8>
	...

08000da4 <INITIALIZE_HARDWARE_DRIVERS>:
  {
  }
}

void INITIALIZE_HARDWARE_DRIVERS(void){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC, ENABLE);          // Enable GPIO Clocks
 8000da8:	2101      	movs	r1, #1
 8000daa:	2007      	movs	r0, #7
 8000dac:	f7ff fb46 	bl	800043c <RCC_AHB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3 | RCC_APB1Periph_TIM2, ENABLE);                                   // Enable Timer Clocks
 8000db0:	2101      	movs	r1, #1
 8000db2:	2003      	movs	r0, #3
 8000db4:	f7ff fb62 	bl	800047c <RCC_APB1PeriphClockCmd>

	GPIO_initStruct.GPIO_Mode = GPIO_Mode_AF;                                                                    // Timer 2 Input Capture Pin GPIO Settings
 8000db8:	4b70      	ldr	r3, [pc, #448]	; (8000f7c <INITIALIZE_HARDWARE_DRIVERS+0x1d8>)
 8000dba:	2202      	movs	r2, #2
 8000dbc:	711a      	strb	r2, [r3, #4]
	GPIO_initStruct.GPIO_OType = GPIO_OType_PP;
 8000dbe:	4b6f      	ldr	r3, [pc, #444]	; (8000f7c <INITIALIZE_HARDWARE_DRIVERS+0x1d8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	719a      	strb	r2, [r3, #6]
	GPIO_initStruct.GPIO_Pin = GPIO_Pin_1;
 8000dc4:	4b6d      	ldr	r3, [pc, #436]	; (8000f7c <INITIALIZE_HARDWARE_DRIVERS+0x1d8>)
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	601a      	str	r2, [r3, #0]
	GPIO_initStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000dca:	4b6c      	ldr	r3, [pc, #432]	; (8000f7c <INITIALIZE_HARDWARE_DRIVERS+0x1d8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	71da      	strb	r2, [r3, #7]
	GPIO_initStruct.GPIO_Speed = GPIO_Speed_25MHz;
 8000dd0:	4b6a      	ldr	r3, [pc, #424]	; (8000f7c <INITIALIZE_HARDWARE_DRIVERS+0x1d8>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	715a      	strb	r2, [r3, #5]

	GPIO_Init(GPIOA, &GPIO_initStruct);
 8000dd6:	4969      	ldr	r1, [pc, #420]	; (8000f7c <INITIALIZE_HARDWARE_DRIVERS+0x1d8>)
 8000dd8:	4869      	ldr	r0, [pc, #420]	; (8000f80 <INITIALIZE_HARDWARE_DRIVERS+0x1dc>)
 8000dda:	f7ff fa57 	bl	800028c <GPIO_Init>

	GPIO_initStruct.GPIO_Mode = GPIO_Mode_AF;                                                                    // Timer 3 Channel 1 & 2 Output Compare Pin GPIO Settings
 8000dde:	4b67      	ldr	r3, [pc, #412]	; (8000f7c <INITIALIZE_HARDWARE_DRIVERS+0x1d8>)
 8000de0:	2202      	movs	r2, #2
 8000de2:	711a      	strb	r2, [r3, #4]
	GPIO_initStruct.GPIO_OType = GPIO_OType_PP;
 8000de4:	4b65      	ldr	r3, [pc, #404]	; (8000f7c <INITIALIZE_HARDWARE_DRIVERS+0x1d8>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	719a      	strb	r2, [r3, #6]
	GPIO_initStruct.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
 8000dea:	4b64      	ldr	r3, [pc, #400]	; (8000f7c <INITIALIZE_HARDWARE_DRIVERS+0x1d8>)
 8000dec:	2230      	movs	r2, #48	; 0x30
 8000dee:	601a      	str	r2, [r3, #0]
	GPIO_initStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000df0:	4b62      	ldr	r3, [pc, #392]	; (8000f7c <INITIALIZE_HARDWARE_DRIVERS+0x1d8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	71da      	strb	r2, [r3, #7]
	GPIO_initStruct.GPIO_Speed = GPIO_Speed_25MHz;
 8000df6:	4b61      	ldr	r3, [pc, #388]	; (8000f7c <INITIALIZE_HARDWARE_DRIVERS+0x1d8>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	715a      	strb	r2, [r3, #5]

	GPIO_Init(GPIOB, &GPIO_initStruct);
 8000dfc:	495f      	ldr	r1, [pc, #380]	; (8000f7c <INITIALIZE_HARDWARE_DRIVERS+0x1d8>)
 8000dfe:	4861      	ldr	r0, [pc, #388]	; (8000f84 <INITIALIZE_HARDWARE_DRIVERS+0x1e0>)
 8000e00:	f7ff fa44 	bl	800028c <GPIO_Init>

	GPIO_initStruct.GPIO_Mode = GPIO_Mode_AF;                                                                    // Timer 3 Channel 3 Output Compare Pin GPIO Settings
 8000e04:	4b5d      	ldr	r3, [pc, #372]	; (8000f7c <INITIALIZE_HARDWARE_DRIVERS+0x1d8>)
 8000e06:	2202      	movs	r2, #2
 8000e08:	711a      	strb	r2, [r3, #4]
	GPIO_initStruct.GPIO_OType = GPIO_OType_PP;
 8000e0a:	4b5c      	ldr	r3, [pc, #368]	; (8000f7c <INITIALIZE_HARDWARE_DRIVERS+0x1d8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	719a      	strb	r2, [r3, #6]
	GPIO_initStruct.GPIO_Pin = GPIO_Pin_8;
 8000e10:	4b5a      	ldr	r3, [pc, #360]	; (8000f7c <INITIALIZE_HARDWARE_DRIVERS+0x1d8>)
 8000e12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e16:	601a      	str	r2, [r3, #0]
	GPIO_initStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000e18:	4b58      	ldr	r3, [pc, #352]	; (8000f7c <INITIALIZE_HARDWARE_DRIVERS+0x1d8>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	71da      	strb	r2, [r3, #7]
	GPIO_initStruct.GPIO_Speed = GPIO_Speed_25MHz;
 8000e1e:	4b57      	ldr	r3, [pc, #348]	; (8000f7c <INITIALIZE_HARDWARE_DRIVERS+0x1d8>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	715a      	strb	r2, [r3, #5]

	GPIO_Init(GPIOC, &GPIO_initStruct);
 8000e24:	4955      	ldr	r1, [pc, #340]	; (8000f7c <INITIALIZE_HARDWARE_DRIVERS+0x1d8>)
 8000e26:	4858      	ldr	r0, [pc, #352]	; (8000f88 <INITIALIZE_HARDWARE_DRIVERS+0x1e4>)
 8000e28:	f7ff fa30 	bl	800028c <GPIO_Init>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource4 | GPIO_PinSource5, GPIO_AF_TIM3);                                    // Pin AF Configurations According to Datasheet Alternate Function Map
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	2105      	movs	r1, #5
 8000e30:	4854      	ldr	r0, [pc, #336]	; (8000f84 <INITIALIZE_HARDWARE_DRIVERS+0x1e0>)
 8000e32:	f7ff fab9 	bl	80003a8 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_TIM3);
 8000e36:	2202      	movs	r2, #2
 8000e38:	2108      	movs	r1, #8
 8000e3a:	4853      	ldr	r0, [pc, #332]	; (8000f88 <INITIALIZE_HARDWARE_DRIVERS+0x1e4>)
 8000e3c:	f7ff fab4 	bl	80003a8 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_TIM2);
 8000e40:	2201      	movs	r2, #1
 8000e42:	2101      	movs	r1, #1
 8000e44:	484e      	ldr	r0, [pc, #312]	; (8000f80 <INITIALIZE_HARDWARE_DRIVERS+0x1dc>)
 8000e46:	f7ff faaf 	bl	80003a8 <GPIO_PinAFConfig>


	TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV4;                                                     // Timer 3 Time Base Settings
 8000e4a:	4b50      	ldr	r3, [pc, #320]	; (8000f8c <INITIALIZE_HARDWARE_DRIVERS+0x1e8>)
 8000e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e50:	811a      	strh	r2, [r3, #8]
	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8000e52:	4b4e      	ldr	r3, [pc, #312]	; (8000f8c <INITIALIZE_HARDWARE_DRIVERS+0x1e8>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	805a      	strh	r2, [r3, #2]
	TIM_TimeBaseInitStruct.TIM_Period = 1999;                                                                    // Period is doubled in Output Compare Because Timer Works x2 Times Faster
 8000e58:	4b4c      	ldr	r3, [pc, #304]	; (8000f8c <INITIALIZE_HARDWARE_DRIVERS+0x1e8>)
 8000e5a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000e5e:	605a      	str	r2, [r3, #4]
	TIM_TimeBaseInitStruct.TIM_Prescaler = 5999;                                                                 // This Prescaler and Period Makes Timer Work in 1 Hz.
 8000e60:	4b4a      	ldr	r3, [pc, #296]	; (8000f8c <INITIALIZE_HARDWARE_DRIVERS+0x1e8>)
 8000e62:	f241 726f 	movw	r2, #5999	; 0x176f
 8000e66:	801a      	strh	r2, [r3, #0]
	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseInitStruct);
 8000e68:	4948      	ldr	r1, [pc, #288]	; (8000f8c <INITIALIZE_HARDWARE_DRIVERS+0x1e8>)
 8000e6a:	4849      	ldr	r0, [pc, #292]	; (8000f90 <INITIALIZE_HARDWARE_DRIVERS+0x1ec>)
 8000e6c:	f7ff fb26 	bl	80004bc <TIM_TimeBaseInit>

	TIM_OCInitStruct.TIM_OCIdleState = TIM_OCIdleState_Reset;                                                    // Timer 3 Channel 1 Output Compare Settings
 8000e70:	4b48      	ldr	r3, [pc, #288]	; (8000f94 <INITIALIZE_HARDWARE_DRIVERS+0x1f0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	821a      	strh	r2, [r3, #16]
	TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_Toggle;                                                             // Toggle Mode (When Pulse == Tim_Counter Toggle Output)
 8000e76:	4b47      	ldr	r3, [pc, #284]	; (8000f94 <INITIALIZE_HARDWARE_DRIVERS+0x1f0>)
 8000e78:	2230      	movs	r2, #48	; 0x30
 8000e7a:	801a      	strh	r2, [r3, #0]
	TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
 8000e7c:	4b45      	ldr	r3, [pc, #276]	; (8000f94 <INITIALIZE_HARDWARE_DRIVERS+0x1f0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	819a      	strh	r2, [r3, #12]
	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 8000e82:	4b44      	ldr	r3, [pc, #272]	; (8000f94 <INITIALIZE_HARDWARE_DRIVERS+0x1f0>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	805a      	strh	r2, [r3, #2]
	TIM_OCInitStruct.TIM_Pulse = 500;
 8000e88:	4b42      	ldr	r3, [pc, #264]	; (8000f94 <INITIALIZE_HARDWARE_DRIVERS+0x1f0>)
 8000e8a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e8e:	609a      	str	r2, [r3, #8]

	TIM_OC1Init(TIM3, &TIM_OCInitStruct);
 8000e90:	4940      	ldr	r1, [pc, #256]	; (8000f94 <INITIALIZE_HARDWARE_DRIVERS+0x1f0>)
 8000e92:	483f      	ldr	r0, [pc, #252]	; (8000f90 <INITIALIZE_HARDWARE_DRIVERS+0x1ec>)
 8000e94:	f7ff fbaa 	bl	80005ec <TIM_OC1Init>

	TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;                                                               // Timer 3 Channel 2 PWM Mode (Pulse / Timer_Period == Duty Cycle)
 8000e98:	4b3e      	ldr	r3, [pc, #248]	; (8000f94 <INITIALIZE_HARDWARE_DRIVERS+0x1f0>)
 8000e9a:	2260      	movs	r2, #96	; 0x60
 8000e9c:	801a      	strh	r2, [r3, #0]
	TIM_OCInitStruct.TIM_Pulse = 1000;
 8000e9e:	4b3d      	ldr	r3, [pc, #244]	; (8000f94 <INITIALIZE_HARDWARE_DRIVERS+0x1f0>)
 8000ea0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ea4:	609a      	str	r2, [r3, #8]

	TIM_OC2Init(TIM3, &TIM_OCInitStruct);
 8000ea6:	493b      	ldr	r1, [pc, #236]	; (8000f94 <INITIALIZE_HARDWARE_DRIVERS+0x1f0>)
 8000ea8:	4839      	ldr	r0, [pc, #228]	; (8000f90 <INITIALIZE_HARDWARE_DRIVERS+0x1ec>)
 8000eaa:	f7ff fc19 	bl	80006e0 <TIM_OC2Init>

	TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_Active;                                                             // Timer 3 Channel 3 Active Mode (Pulse == Tim_Counter Sets Output High)
 8000eae:	4b39      	ldr	r3, [pc, #228]	; (8000f94 <INITIALIZE_HARDWARE_DRIVERS+0x1f0>)
 8000eb0:	2210      	movs	r2, #16
 8000eb2:	801a      	strh	r2, [r3, #0]
	TIM_OCInitStruct.TIM_Pulse = 250;
 8000eb4:	4b37      	ldr	r3, [pc, #220]	; (8000f94 <INITIALIZE_HARDWARE_DRIVERS+0x1f0>)
 8000eb6:	22fa      	movs	r2, #250	; 0xfa
 8000eb8:	609a      	str	r2, [r3, #8]

	TIM_OC3Init(TIM3, &TIM_OCInitStruct);
 8000eba:	4936      	ldr	r1, [pc, #216]	; (8000f94 <INITIALIZE_HARDWARE_DRIVERS+0x1f0>)
 8000ebc:	4834      	ldr	r0, [pc, #208]	; (8000f90 <INITIALIZE_HARDWARE_DRIVERS+0x1ec>)
 8000ebe:	f7ff fc97 	bl	80007f0 <TIM_OC3Init>

	TIM_ITConfig(TIM3, TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3, ENABLE);                                            // Enable Channel 1, 2 and 3 for Capture/Compare Interrupt
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	210e      	movs	r1, #14
 8000ec6:	4832      	ldr	r0, [pc, #200]	; (8000f90 <INITIALIZE_HARDWARE_DRIVERS+0x1ec>)
 8000ec8:	f7ff fde0 	bl	8000a8c <TIM_ITConfig>

	TIM_Cmd(TIM3, ENABLE);                                                                                       // Enable Timer 3
 8000ecc:	2101      	movs	r1, #1
 8000ece:	4830      	ldr	r0, [pc, #192]	; (8000f90 <INITIALIZE_HARDWARE_DRIVERS+0x1ec>)
 8000ed0:	f7ff fb6c 	bl	80005ac <TIM_Cmd>

	TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV4;                                                     // Timer 2 Time Base Settings(My Clock is 24 MHz)
 8000ed4:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <INITIALIZE_HARDWARE_DRIVERS+0x1e8>)
 8000ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eda:	811a      	strh	r2, [r3, #8]
	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8000edc:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <INITIALIZE_HARDWARE_DRIVERS+0x1e8>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	805a      	strh	r2, [r3, #2]
	TIM_TimeBaseInitStruct.TIM_Period = 999;                                                                     // Period is calculated to obtain 1 second update rate from timer.
 8000ee2:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <INITIALIZE_HARDWARE_DRIVERS+0x1e8>)
 8000ee4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ee8:	605a      	str	r2, [r3, #4]
	TIM_TimeBaseInitStruct.TIM_Prescaler = 5999;                                                                 // Prescaler value for 1 Hz.
 8000eea:	4b28      	ldr	r3, [pc, #160]	; (8000f8c <INITIALIZE_HARDWARE_DRIVERS+0x1e8>)
 8000eec:	f241 726f 	movw	r2, #5999	; 0x176f
 8000ef0:	801a      	strh	r2, [r3, #0]
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseInitStruct);
 8000ef2:	4926      	ldr	r1, [pc, #152]	; (8000f8c <INITIALIZE_HARDWARE_DRIVERS+0x1e8>)
 8000ef4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ef8:	f7ff fae0 	bl	80004bc <TIM_TimeBaseInit>

	TIM_ICInitStruct.TIM_Channel = TIM_Channel_2;                                                                // Input Capture Settings For Timer 2 Channel 2
 8000efc:	4b26      	ldr	r3, [pc, #152]	; (8000f98 <INITIALIZE_HARDWARE_DRIVERS+0x1f4>)
 8000efe:	2204      	movs	r2, #4
 8000f00:	801a      	strh	r2, [r3, #0]
	TIM_ICInitStruct.TIM_ICFilter = 0;
 8000f02:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <INITIALIZE_HARDWARE_DRIVERS+0x1f4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	811a      	strh	r2, [r3, #8]
	TIM_ICInitStruct.TIM_ICPolarity = TIM_ICPolarity_Falling;                                                    // Capture at Falling Edge of Input Signal
 8000f08:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <INITIALIZE_HARDWARE_DRIVERS+0x1f4>)
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	805a      	strh	r2, [r3, #2]
	TIM_ICInitStruct.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8000f0e:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <INITIALIZE_HARDWARE_DRIVERS+0x1f4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	80da      	strh	r2, [r3, #6]
	TIM_ICInitStruct.TIM_ICSelection = TIM_ICSelection_DirectTI;
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <INITIALIZE_HARDWARE_DRIVERS+0x1f4>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	809a      	strh	r2, [r3, #4]

	TIM_ICInit(TIM2, &TIM_ICInitStruct);
 8000f1a:	491f      	ldr	r1, [pc, #124]	; (8000f98 <INITIALIZE_HARDWARE_DRIVERS+0x1f4>)
 8000f1c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f20:	f7ff fcec 	bl	80008fc <TIM_ICInit>

	TIM_ITConfig(TIM2, TIM_IT_CC2, ENABLE);                                                                      // Enable Timer 2 Channel 2 for Capture/Compare Interrupt
 8000f24:	2201      	movs	r2, #1
 8000f26:	2104      	movs	r1, #4
 8000f28:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f2c:	f7ff fdae 	bl	8000a8c <TIM_ITConfig>

	TIM_Cmd(TIM2, ENABLE);                                                                                       // Enable Timer 2
 8000f30:	2101      	movs	r1, #1
 8000f32:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f36:	f7ff fb39 	bl	80005ac <TIM_Cmd>

	NVIC_initStruct.NVIC_IRQChannel = TIM3_IRQn;                                                                 // Timer 3 Interrupt Handler is fed to NVIC
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <INITIALIZE_HARDWARE_DRIVERS+0x1f8>)
 8000f3c:	221d      	movs	r2, #29
 8000f3e:	701a      	strb	r2, [r3, #0]
	NVIC_initStruct.NVIC_IRQChannelCmd = ENABLE;
 8000f40:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <INITIALIZE_HARDWARE_DRIVERS+0x1f8>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	70da      	strb	r2, [r3, #3]
	NVIC_initStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <INITIALIZE_HARDWARE_DRIVERS+0x1f8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	705a      	strb	r2, [r3, #1]
	NVIC_initStruct.NVIC_IRQChannelSubPriority = 0;
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <INITIALIZE_HARDWARE_DRIVERS+0x1f8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	709a      	strb	r2, [r3, #2]

	NVIC_Init(&NVIC_initStruct);
 8000f52:	4812      	ldr	r0, [pc, #72]	; (8000f9c <INITIALIZE_HARDWARE_DRIVERS+0x1f8>)
 8000f54:	f7ff f938 	bl	80001c8 <NVIC_Init>


	NVIC_initStruct.NVIC_IRQChannel = TIM2_IRQn;                                                                 // Timer 2 Interrupt Handler is fed to NVIC
 8000f58:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <INITIALIZE_HARDWARE_DRIVERS+0x1f8>)
 8000f5a:	221c      	movs	r2, #28
 8000f5c:	701a      	strb	r2, [r3, #0]
	NVIC_initStruct.NVIC_IRQChannelCmd = ENABLE;
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <INITIALIZE_HARDWARE_DRIVERS+0x1f8>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	70da      	strb	r2, [r3, #3]
	NVIC_initStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8000f64:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <INITIALIZE_HARDWARE_DRIVERS+0x1f8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	705a      	strb	r2, [r3, #1]
	NVIC_initStruct.NVIC_IRQChannelSubPriority = 0;
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <INITIALIZE_HARDWARE_DRIVERS+0x1f8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	709a      	strb	r2, [r3, #2]

	NVIC_Init(&NVIC_initStruct);
 8000f70:	480a      	ldr	r0, [pc, #40]	; (8000f9c <INITIALIZE_HARDWARE_DRIVERS+0x1f8>)
 8000f72:	f7ff f929 	bl	80001c8 <NVIC_Init>

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000020 	.word	0x20000020
 8000f80:	40020000 	.word	0x40020000
 8000f84:	40020400 	.word	0x40020400
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	2000004c 	.word	0x2000004c
 8000f90:	40000400 	.word	0x40000400
 8000f94:	2000002c 	.word	0x2000002c
 8000f98:	20000040 	.word	0x20000040
 8000f9c:	20000028 	.word	0x20000028

08000fa0 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	if(TIM_GetITStatus(TIM3, TIM_IT_CC1)){                                                                       // Timer 3 Channel 1 Interrupt (Output Toggled When Counter == Pulse)
 8000fa4:	2102      	movs	r1, #2
 8000fa6:	4821      	ldr	r0, [pc, #132]	; (800102c <TIM3_IRQHandler+0x8c>)
 8000fa8:	f7ff fd94 	bl	8000ad4 <TIM_GetITStatus>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d00a      	beq.n	8000fc8 <TIM3_IRQHandler+0x28>
		cntCC1 = TIM_GetCounter(TIM3);																			 // Measuring Timer Counter when Interrupt happens
 8000fb2:	481e      	ldr	r0, [pc, #120]	; (800102c <TIM3_IRQHandler+0x8c>)
 8000fb4:	f7ff faee 	bl	8000594 <TIM_GetCounter>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <TIM3_IRQHandler+0x90>)
 8000fbe:	701a      	strb	r2, [r3, #0]
 		TIM_ClearITPendingBit(TIM3, TIM_IT_CC1);                                                                 // Exit Interrupt
 8000fc0:	2102      	movs	r1, #2
 8000fc2:	481a      	ldr	r0, [pc, #104]	; (800102c <TIM3_IRQHandler+0x8c>)
 8000fc4:	f7ff fdb0 	bl	8000b28 <TIM_ClearITPendingBit>
	}

	if(TIM_GetITStatus(TIM3, TIM_IT_CC2)){                                                                       // Timer 3 Channel 2 Interrupt (Output High When Counter < Pulse)
 8000fc8:	2104      	movs	r1, #4
 8000fca:	4818      	ldr	r0, [pc, #96]	; (800102c <TIM3_IRQHandler+0x8c>)
 8000fcc:	f7ff fd82 	bl	8000ad4 <TIM_GetITStatus>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d00a      	beq.n	8000fec <TIM3_IRQHandler+0x4c>
		cntCC2 = TIM_GetCounter(TIM3);                                                                           // Measuring Timer Counter when Interrupt happens
 8000fd6:	4815      	ldr	r0, [pc, #84]	; (800102c <TIM3_IRQHandler+0x8c>)
 8000fd8:	f7ff fadc 	bl	8000594 <TIM_GetCounter>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <TIM3_IRQHandler+0x94>)
 8000fe2:	701a      	strb	r2, [r3, #0]
		TIM_ClearITPendingBit(TIM3, TIM_IT_CC2);                                                                 // Exit Interrupt
 8000fe4:	2104      	movs	r1, #4
 8000fe6:	4811      	ldr	r0, [pc, #68]	; (800102c <TIM3_IRQHandler+0x8c>)
 8000fe8:	f7ff fd9e 	bl	8000b28 <TIM_ClearITPendingBit>
	}

	if(TIM_GetITStatus(TIM3, TIM_IT_CC3)){                                                                       // Timer 3 Channel 3 Interrupt (Output High When Counter > Pulse (Active Mode))
 8000fec:	2108      	movs	r1, #8
 8000fee:	480f      	ldr	r0, [pc, #60]	; (800102c <TIM3_IRQHandler+0x8c>)
 8000ff0:	f7ff fd70 	bl	8000ad4 <TIM_GetITStatus>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d015      	beq.n	8001026 <TIM3_IRQHandler+0x86>
		TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_Inactive;                                                       // Set New Pulse Value to Obtain A Square Wave (Output Low When Counter > Pulse (Inactive Mode))
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <TIM3_IRQHandler+0x98>)
 8000ffc:	2220      	movs	r2, #32
 8000ffe:	801a      	strh	r2, [r3, #0]
		TIM_OCInitStruct.TIM_Pulse = 1250;
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <TIM3_IRQHandler+0x98>)
 8001002:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001006:	609a      	str	r2, [r3, #8]

		TIM_OC3Init(TIM3, &TIM_OCInitStruct);
 8001008:	490b      	ldr	r1, [pc, #44]	; (8001038 <TIM3_IRQHandler+0x98>)
 800100a:	4808      	ldr	r0, [pc, #32]	; (800102c <TIM3_IRQHandler+0x8c>)
 800100c:	f7ff fbf0 	bl	80007f0 <TIM_OC3Init>
		cntCC3 = TIM_GetCounter(TIM3);                                                                           // Measuring Timer Counter when Interrupt happens
 8001010:	4806      	ldr	r0, [pc, #24]	; (800102c <TIM3_IRQHandler+0x8c>)
 8001012:	f7ff fabf 	bl	8000594 <TIM_GetCounter>
 8001016:	4603      	mov	r3, r0
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <TIM3_IRQHandler+0x9c>)
 800101c:	701a      	strb	r2, [r3, #0]
		TIM_ClearITPendingBit(TIM3, TIM_IT_CC3);                                                                 // Exit Interrupt
 800101e:	2108      	movs	r1, #8
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <TIM3_IRQHandler+0x8c>)
 8001022:	f7ff fd81 	bl	8000b28 <TIM_ClearITPendingBit>
	}

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40000400 	.word	0x40000400
 8001030:	2000001c 	.word	0x2000001c
 8001034:	2000001d 	.word	0x2000001d
 8001038:	2000002c 	.word	0x2000002c
 800103c:	2000001e 	.word	0x2000001e

08001040 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	if(TIM_GetITStatus(TIM2, TIM_IT_CC2)){                                                                       // Timer 3 Channel 3 Output Is Connected to Timer 2 Channel 2 Input Capture
 8001044:	2104      	movs	r1, #4
 8001046:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800104a:	f7ff fd43 	bl	8000ad4 <TIM_GetITStatus>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d00e      	beq.n	8001072 <TIM2_IRQHandler+0x32>
                                                                                                                 // When The Output of Tim3Ch3 Is In Falling Edge (Tim2Ch2 is Configured As Falling Edge Input Capture)
		TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_Active;                                                         // Timer 2 Interrupt Happens, Sets a New Active Mode for Tim3Ch3 Output Compare
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <TIM2_IRQHandler+0x38>)
 8001056:	2210      	movs	r2, #16
 8001058:	801a      	strh	r2, [r3, #0]
		TIM_OCInitStruct.TIM_Pulse = 250;                                                                        // So At First, Tim3Ch3 Starts Low, When Tim3Ch3 Counter == Pulse (250), Output Goes High
 800105a:	4b07      	ldr	r3, [pc, #28]	; (8001078 <TIM2_IRQHandler+0x38>)
 800105c:	22fa      	movs	r2, #250	; 0xfa
 800105e:	609a      	str	r2, [r3, #8]
                                                                                                                 // After that Tim3Ch3 Interrupt Happens, Sets New Pulse Value, When Tim3Ch3 Counter == Pulse (1250), Output Goes Low
		TIM_OC3Init(TIM3, &TIM_OCInitStruct);                                                                    // When Output of Tim3Ch3 Goes Low, Tim2Ch2 Input Capture Interrupt Happens
 8001060:	4905      	ldr	r1, [pc, #20]	; (8001078 <TIM2_IRQHandler+0x38>)
 8001062:	4806      	ldr	r0, [pc, #24]	; (800107c <TIM2_IRQHandler+0x3c>)
 8001064:	f7ff fbc4 	bl	80007f0 <TIM_OC3Init>
		                                                                                                         // Tim2Ch2 Interrupt Sets New Pulse Value, When Tim3Ch3 Counter == Pulse (250), Output Goes High
																												 // This Cycle Goes On and On and We have A Square Wave In the Tim3Ch3 Output
		TIM_ClearITPendingBit(TIM2, TIM_IT_CC2);
 8001068:	2104      	movs	r1, #4
 800106a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800106e:	f7ff fd5b 	bl	8000b28 <TIM_ClearITPendingBit>
		}
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	2000002c 	.word	0x2000002c
 800107c:	40000400 	.word	0x40000400

08001080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001084:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001086:	e003      	b.n	8001090 <LoopCopyDataInit>

08001088 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800108a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800108c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800108e:	3104      	adds	r1, #4

08001090 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001090:	480b      	ldr	r0, [pc, #44]	; (80010c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001094:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001096:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001098:	d3f6      	bcc.n	8001088 <CopyDataInit>
  ldr  r2, =_sbss
 800109a:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800109c:	e002      	b.n	80010a4 <LoopFillZerobss>

0800109e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800109e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010a0:	f842 3b04 	str.w	r3, [r2], #4

080010a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010a8:	d3f9      	bcc.n	800109e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010aa:	f000 f841 	bl	8001130 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ae:	f000 f875 	bl	800119c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b2:	f7ff fe71 	bl	8000d98 <main>
  bx  lr    
 80010b6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010b8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80010bc:	08001204 	.word	0x08001204
  ldr  r0, =_sdata
 80010c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010c4:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 80010c8:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 80010cc:	20000058 	.word	0x20000058

080010d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC_IRQHandler>

080010d2 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <HardFault_Handler+0x4>

080010e6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <MemManage_Handler+0x4>

080010ec <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <BusFault_Handler+0x4>

080010f2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <UsageFault_Handler+0x4>

080010f8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001134:	4a16      	ldr	r2, [pc, #88]	; (8001190 <SystemInit+0x60>)
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <SystemInit+0x60>)
 8001138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800113c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001140:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001144:	4a13      	ldr	r2, [pc, #76]	; (8001194 <SystemInit+0x64>)
 8001146:	4b13      	ldr	r3, [pc, #76]	; (8001194 <SystemInit+0x64>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001150:	4b10      	ldr	r3, [pc, #64]	; (8001194 <SystemInit+0x64>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001156:	4a0f      	ldr	r2, [pc, #60]	; (8001194 <SystemInit+0x64>)
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <SystemInit+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001164:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <SystemInit+0x64>)
 8001168:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <SystemInit+0x68>)
 800116a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800116c:	4a09      	ldr	r2, [pc, #36]	; (8001194 <SystemInit+0x64>)
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <SystemInit+0x64>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001176:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <SystemInit+0x64>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <SystemInit+0x60>)
 8001180:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001184:	609a      	str	r2, [r3, #8]
#endif
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00
 8001194:	40023800 	.word	0x40023800
 8001198:	24003010 	.word	0x24003010

0800119c <__libc_init_array>:
 800119c:	b570      	push	{r4, r5, r6, lr}
 800119e:	4e0d      	ldr	r6, [pc, #52]	; (80011d4 <__libc_init_array+0x38>)
 80011a0:	4c0d      	ldr	r4, [pc, #52]	; (80011d8 <__libc_init_array+0x3c>)
 80011a2:	1ba4      	subs	r4, r4, r6
 80011a4:	10a4      	asrs	r4, r4, #2
 80011a6:	2500      	movs	r5, #0
 80011a8:	42a5      	cmp	r5, r4
 80011aa:	d109      	bne.n	80011c0 <__libc_init_array+0x24>
 80011ac:	4e0b      	ldr	r6, [pc, #44]	; (80011dc <__libc_init_array+0x40>)
 80011ae:	4c0c      	ldr	r4, [pc, #48]	; (80011e0 <__libc_init_array+0x44>)
 80011b0:	f000 f818 	bl	80011e4 <_init>
 80011b4:	1ba4      	subs	r4, r4, r6
 80011b6:	10a4      	asrs	r4, r4, #2
 80011b8:	2500      	movs	r5, #0
 80011ba:	42a5      	cmp	r5, r4
 80011bc:	d105      	bne.n	80011ca <__libc_init_array+0x2e>
 80011be:	bd70      	pop	{r4, r5, r6, pc}
 80011c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011c4:	4798      	blx	r3
 80011c6:	3501      	adds	r5, #1
 80011c8:	e7ee      	b.n	80011a8 <__libc_init_array+0xc>
 80011ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011ce:	4798      	blx	r3
 80011d0:	3501      	adds	r5, #1
 80011d2:	e7f2      	b.n	80011ba <__libc_init_array+0x1e>
 80011d4:	080011fc 	.word	0x080011fc
 80011d8:	080011fc 	.word	0x080011fc
 80011dc:	080011fc 	.word	0x080011fc
 80011e0:	08001200 	.word	0x08001200

080011e4 <_init>:
 80011e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011e6:	bf00      	nop
 80011e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ea:	bc08      	pop	{r3}
 80011ec:	469e      	mov	lr, r3
 80011ee:	4770      	bx	lr

080011f0 <_fini>:
 80011f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011f2:	bf00      	nop
 80011f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011f6:	bc08      	pop	{r3}
 80011f8:	469e      	mov	lr, r3
 80011fa:	4770      	bx	lr
