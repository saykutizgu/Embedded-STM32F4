
TimerExtiDebounce.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000abc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c44  08000c4c  00010c4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000c44  08000c44  00010c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000c48  08000c48  00010c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010c4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00010c4c  2**0
                  CONTENTS
  7 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000020  20000020  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010c4c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00004a2e  00000000  00000000  00010c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000cda  00000000  00000000  000156aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000006c8  00000000  00000000  00016388  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000630  00000000  00000000  00016a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002246  00000000  00000000  00017080  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002347  00000000  00000000  000192c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0001b60d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001cbc  00000000  00000000  0001b68c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0001d348  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000c2c 	.word	0x08000c2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000c2c 	.word	0x08000c2c

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f003 031f 	and.w	r3, r3, #31
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000258:	490b      	ldr	r1, [pc, #44]	; (8000288 <NVIC_Init+0xc0>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f003 031f 	and.w	r3, r3, #31
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000298:	4b34      	ldr	r3, [pc, #208]	; (800036c <EXTI_Init+0xe0>)
 800029a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	799b      	ldrb	r3, [r3, #6]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d04f      	beq.n	8000344 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80002a4:	4931      	ldr	r1, [pc, #196]	; (800036c <EXTI_Init+0xe0>)
 80002a6:	4b31      	ldr	r3, [pc, #196]	; (800036c <EXTI_Init+0xe0>)
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	43db      	mvns	r3, r3
 80002b0:	4013      	ands	r3, r2
 80002b2:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80002b4:	492d      	ldr	r1, [pc, #180]	; (800036c <EXTI_Init+0xe0>)
 80002b6:	4b2d      	ldr	r3, [pc, #180]	; (800036c <EXTI_Init+0xe0>)
 80002b8:	685a      	ldr	r2, [r3, #4]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	43db      	mvns	r3, r3
 80002c0:	4013      	ands	r3, r2
 80002c2:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	791b      	ldrb	r3, [r3, #4]
 80002c8:	461a      	mov	r2, r3
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	4413      	add	r3, r2
 80002ce:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	68fa      	ldr	r2, [r7, #12]
 80002d4:	6811      	ldr	r1, [r2, #0]
 80002d6:	687a      	ldr	r2, [r7, #4]
 80002d8:	6812      	ldr	r2, [r2, #0]
 80002da:	430a      	orrs	r2, r1
 80002dc:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80002de:	4923      	ldr	r1, [pc, #140]	; (800036c <EXTI_Init+0xe0>)
 80002e0:	4b22      	ldr	r3, [pc, #136]	; (800036c <EXTI_Init+0xe0>)
 80002e2:	689a      	ldr	r2, [r3, #8]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	43db      	mvns	r3, r3
 80002ea:	4013      	ands	r3, r2
 80002ec:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80002ee:	491f      	ldr	r1, [pc, #124]	; (800036c <EXTI_Init+0xe0>)
 80002f0:	4b1e      	ldr	r3, [pc, #120]	; (800036c <EXTI_Init+0xe0>)
 80002f2:	68da      	ldr	r2, [r3, #12]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	43db      	mvns	r3, r3
 80002fa:	4013      	ands	r3, r2
 80002fc:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	795b      	ldrb	r3, [r3, #5]
 8000302:	2b10      	cmp	r3, #16
 8000304:	d10e      	bne.n	8000324 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000306:	4919      	ldr	r1, [pc, #100]	; (800036c <EXTI_Init+0xe0>)
 8000308:	4b18      	ldr	r3, [pc, #96]	; (800036c <EXTI_Init+0xe0>)
 800030a:	689a      	ldr	r2, [r3, #8]
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4313      	orrs	r3, r2
 8000312:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000314:	4915      	ldr	r1, [pc, #84]	; (800036c <EXTI_Init+0xe0>)
 8000316:	4b15      	ldr	r3, [pc, #84]	; (800036c <EXTI_Init+0xe0>)
 8000318:	68da      	ldr	r2, [r3, #12]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4313      	orrs	r3, r2
 8000320:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000322:	e01d      	b.n	8000360 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000324:	4b11      	ldr	r3, [pc, #68]	; (800036c <EXTI_Init+0xe0>)
 8000326:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	795b      	ldrb	r3, [r3, #5]
 800032c:	461a      	mov	r2, r3
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	4413      	add	r3, r2
 8000332:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	68fa      	ldr	r2, [r7, #12]
 8000338:	6811      	ldr	r1, [r2, #0]
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	6812      	ldr	r2, [r2, #0]
 800033e:	430a      	orrs	r2, r1
 8000340:	601a      	str	r2, [r3, #0]
}
 8000342:	e00d      	b.n	8000360 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	791b      	ldrb	r3, [r3, #4]
 8000348:	461a      	mov	r2, r3
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	4413      	add	r3, r2
 800034e:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	68fa      	ldr	r2, [r7, #12]
 8000354:	6811      	ldr	r1, [r2, #0]
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	6812      	ldr	r2, [r2, #0]
 800035a:	43d2      	mvns	r2, r2
 800035c:	400a      	ands	r2, r1
 800035e:	601a      	str	r2, [r3, #0]
}
 8000360:	bf00      	nop
 8000362:	3714      	adds	r7, #20
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	40013c00 	.word	0x40013c00

08000370 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000378:	2300      	movs	r3, #0
 800037a:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <EXTI_GetITStatus+0x44>)
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4013      	ands	r3, r2
 8000388:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800038a:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <EXTI_GetITStatus+0x44>)
 800038c:	695a      	ldr	r2, [r3, #20]
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4013      	ands	r3, r2
 8000392:	2b00      	cmp	r3, #0
 8000394:	d005      	beq.n	80003a2 <EXTI_GetITStatus+0x32>
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d002      	beq.n	80003a2 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 800039c:	2301      	movs	r3, #1
 800039e:	73fb      	strb	r3, [r7, #15]
 80003a0:	e001      	b.n	80003a6 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 80003a2:	2300      	movs	r3, #0
 80003a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80003a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	3714      	adds	r7, #20
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr
 80003b4:	40013c00 	.word	0x40013c00

080003b8 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80003c0:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <EXTI_ClearITPendingBit+0x1c>)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	6153      	str	r3, [r2, #20]
}
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40013c00 	.word	0x40013c00

080003d8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003d8:	b480      	push	{r7}
 80003da:	b087      	sub	sp, #28
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80003e2:	2300      	movs	r3, #0
 80003e4:	617b      	str	r3, [r7, #20]
 80003e6:	2300      	movs	r3, #0
 80003e8:	613b      	str	r3, [r7, #16]
 80003ea:	2300      	movs	r3, #0
 80003ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003ee:	2300      	movs	r3, #0
 80003f0:	617b      	str	r3, [r7, #20]
 80003f2:	e076      	b.n	80004e2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80003f4:	2201      	movs	r2, #1
 80003f6:	697b      	ldr	r3, [r7, #20]
 80003f8:	fa02 f303 	lsl.w	r3, r2, r3
 80003fc:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	4013      	ands	r3, r2
 8000406:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000408:	68fa      	ldr	r2, [r7, #12]
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	429a      	cmp	r2, r3
 800040e:	d165      	bne.n	80004dc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	2103      	movs	r1, #3
 800041a:	fa01 f303 	lsl.w	r3, r1, r3
 800041e:	43db      	mvns	r3, r3
 8000420:	401a      	ands	r2, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681a      	ldr	r2, [r3, #0]
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	791b      	ldrb	r3, [r3, #4]
 800042e:	4619      	mov	r1, r3
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	fa01 f303 	lsl.w	r3, r1, r3
 8000438:	431a      	orrs	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	791b      	ldrb	r3, [r3, #4]
 8000442:	2b01      	cmp	r3, #1
 8000444:	d003      	beq.n	800044e <GPIO_Init+0x76>
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	791b      	ldrb	r3, [r3, #4]
 800044a:	2b02      	cmp	r3, #2
 800044c:	d12e      	bne.n	80004ac <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	689a      	ldr	r2, [r3, #8]
 8000452:	697b      	ldr	r3, [r7, #20]
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	2103      	movs	r1, #3
 8000458:	fa01 f303 	lsl.w	r3, r1, r3
 800045c:	43db      	mvns	r3, r3
 800045e:	401a      	ands	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	689a      	ldr	r2, [r3, #8]
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	795b      	ldrb	r3, [r3, #5]
 800046c:	4619      	mov	r1, r3
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	fa01 f303 	lsl.w	r3, r1, r3
 8000476:	431a      	orrs	r2, r3
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	685a      	ldr	r2, [r3, #4]
 8000480:	697b      	ldr	r3, [r7, #20]
 8000482:	b29b      	uxth	r3, r3
 8000484:	4619      	mov	r1, r3
 8000486:	2301      	movs	r3, #1
 8000488:	408b      	lsls	r3, r1
 800048a:	43db      	mvns	r3, r3
 800048c:	401a      	ands	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	683a      	ldr	r2, [r7, #0]
 8000498:	7992      	ldrb	r2, [r2, #6]
 800049a:	4611      	mov	r1, r2
 800049c:	697a      	ldr	r2, [r7, #20]
 800049e:	b292      	uxth	r2, r2
 80004a0:	fa01 f202 	lsl.w	r2, r1, r2
 80004a4:	b292      	uxth	r2, r2
 80004a6:	431a      	orrs	r2, r3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	68da      	ldr	r2, [r3, #12]
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	b29b      	uxth	r3, r3
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	2103      	movs	r1, #3
 80004b8:	fa01 f303 	lsl.w	r3, r1, r3
 80004bc:	43db      	mvns	r3, r3
 80004be:	401a      	ands	r2, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	68da      	ldr	r2, [r3, #12]
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	79db      	ldrb	r3, [r3, #7]
 80004cc:	4619      	mov	r1, r3
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	fa01 f303 	lsl.w	r3, r1, r3
 80004d6:	431a      	orrs	r2, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	3301      	adds	r3, #1
 80004e0:	617b      	str	r3, [r7, #20]
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	2b0f      	cmp	r3, #15
 80004e6:	d985      	bls.n	80003f4 <GPIO_Init+0x1c>
    }
  }
}
 80004e8:	bf00      	nop
 80004ea:	371c      	adds	r7, #28
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000500:	2300      	movs	r3, #0
 8000502:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	691a      	ldr	r2, [r3, #16]
 8000508:	887b      	ldrh	r3, [r7, #2]
 800050a:	4013      	ands	r3, r2
 800050c:	2b00      	cmp	r3, #0
 800050e:	d002      	beq.n	8000516 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000510:	2301      	movs	r3, #1
 8000512:	73fb      	strb	r3, [r7, #15]
 8000514:	e001      	b.n	800051a <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000516:	2300      	movs	r3, #0
 8000518:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800051a:	7bfb      	ldrb	r3, [r7, #15]
}
 800051c:	4618      	mov	r0, r3
 800051e:	3714      	adds	r7, #20
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	460b      	mov	r3, r1
 8000532:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	887a      	ldrh	r2, [r7, #2]
 8000538:	831a      	strh	r2, [r3, #24]
}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000546:	b480      	push	{r7}
 8000548:	b083      	sub	sp, #12
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
 800054e:	460b      	mov	r3, r1
 8000550:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	887a      	ldrh	r2, [r7, #2]
 8000556:	835a      	strh	r2, [r3, #26]
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	460b      	mov	r3, r1
 800056e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000570:	78fb      	ldrb	r3, [r7, #3]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d006      	beq.n	8000584 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000576:	490a      	ldr	r1, [pc, #40]	; (80005a0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000578:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <RCC_AHB1PeriphClockCmd+0x3c>)
 800057a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4313      	orrs	r3, r2
 8000580:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000582:	e006      	b.n	8000592 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000584:	4906      	ldr	r1, [pc, #24]	; (80005a0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	43db      	mvns	r3, r3
 800058e:	4013      	ands	r3, r2
 8000590:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	40023800 	.word	0x40023800

080005a4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	460b      	mov	r3, r1
 80005ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80005b0:	78fb      	ldrb	r3, [r7, #3]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d006      	beq.n	80005c4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80005b6:	490a      	ldr	r1, [pc, #40]	; (80005e0 <RCC_APB1PeriphClockCmd+0x3c>)
 80005b8:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <RCC_APB1PeriphClockCmd+0x3c>)
 80005ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4313      	orrs	r3, r2
 80005c0:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80005c2:	e006      	b.n	80005d2 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80005c4:	4906      	ldr	r1, [pc, #24]	; (80005e0 <RCC_APB1PeriphClockCmd+0x3c>)
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <RCC_APB1PeriphClockCmd+0x3c>)
 80005c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	43db      	mvns	r3, r3
 80005ce:	4013      	ands	r3, r2
 80005d0:	640b      	str	r3, [r1, #64]	; 0x40
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800

080005e4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	460b      	mov	r3, r1
 80005ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80005f0:	78fb      	ldrb	r3, [r7, #3]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d006      	beq.n	8000604 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80005f6:	490a      	ldr	r1, [pc, #40]	; (8000620 <RCC_APB2PeriphClockCmd+0x3c>)
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <RCC_APB2PeriphClockCmd+0x3c>)
 80005fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4313      	orrs	r3, r2
 8000600:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000602:	e006      	b.n	8000612 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000604:	4906      	ldr	r1, [pc, #24]	; (8000620 <RCC_APB2PeriphClockCmd+0x3c>)
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <RCC_APB2PeriphClockCmd+0x3c>)
 8000608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	43db      	mvns	r3, r3
 800060e:	4013      	ands	r3, r2
 8000610:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800

08000624 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000624:	b490      	push	{r4, r7}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	460a      	mov	r2, r1
 800062e:	71fb      	strb	r3, [r7, #7]
 8000630:	4613      	mov	r3, r2
 8000632:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000638:	79bb      	ldrb	r3, [r7, #6]
 800063a:	f003 0303 	and.w	r3, r3, #3
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	220f      	movs	r2, #15
 8000642:	fa02 f303 	lsl.w	r3, r2, r3
 8000646:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000648:	4916      	ldr	r1, [pc, #88]	; (80006a4 <SYSCFG_EXTILineConfig+0x80>)
 800064a:	79bb      	ldrb	r3, [r7, #6]
 800064c:	089b      	lsrs	r3, r3, #2
 800064e:	b2db      	uxtb	r3, r3
 8000650:	4618      	mov	r0, r3
 8000652:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <SYSCFG_EXTILineConfig+0x80>)
 8000654:	79bb      	ldrb	r3, [r7, #6]
 8000656:	089b      	lsrs	r3, r3, #2
 8000658:	b2db      	uxtb	r3, r3
 800065a:	3302      	adds	r3, #2
 800065c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	43db      	mvns	r3, r3
 8000664:	401a      	ands	r2, r3
 8000666:	1c83      	adds	r3, r0, #2
 8000668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <SYSCFG_EXTILineConfig+0x80>)
 800066e:	79bb      	ldrb	r3, [r7, #6]
 8000670:	089b      	lsrs	r3, r3, #2
 8000672:	b2db      	uxtb	r3, r3
 8000674:	461c      	mov	r4, r3
 8000676:	4a0b      	ldr	r2, [pc, #44]	; (80006a4 <SYSCFG_EXTILineConfig+0x80>)
 8000678:	79bb      	ldrb	r3, [r7, #6]
 800067a:	089b      	lsrs	r3, r3, #2
 800067c:	b2db      	uxtb	r3, r3
 800067e:	3302      	adds	r3, #2
 8000680:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000684:	79f9      	ldrb	r1, [r7, #7]
 8000686:	79bb      	ldrb	r3, [r7, #6]
 8000688:	f003 0303 	and.w	r3, r3, #3
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	fa01 f303 	lsl.w	r3, r1, r3
 8000692:	431a      	orrs	r2, r3
 8000694:	1ca3      	adds	r3, r4, #2
 8000696:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800069a:	bf00      	nop
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc90      	pop	{r4, r7}
 80006a2:	4770      	bx	lr
 80006a4:	40013800 	.word	0x40013800

080006a8 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a29      	ldr	r2, [pc, #164]	; (8000764 <TIM_TimeBaseInit+0xbc>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d013      	beq.n	80006ec <TIM_TimeBaseInit+0x44>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a28      	ldr	r2, [pc, #160]	; (8000768 <TIM_TimeBaseInit+0xc0>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d00f      	beq.n	80006ec <TIM_TimeBaseInit+0x44>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006d2:	d00b      	beq.n	80006ec <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4a25      	ldr	r2, [pc, #148]	; (800076c <TIM_TimeBaseInit+0xc4>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d007      	beq.n	80006ec <TIM_TimeBaseInit+0x44>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a24      	ldr	r2, [pc, #144]	; (8000770 <TIM_TimeBaseInit+0xc8>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d003      	beq.n	80006ec <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4a23      	ldr	r2, [pc, #140]	; (8000774 <TIM_TimeBaseInit+0xcc>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d108      	bne.n	80006fe <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80006ec:	89fb      	ldrh	r3, [r7, #14]
 80006ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80006f2:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	885a      	ldrh	r2, [r3, #2]
 80006f8:	89fb      	ldrh	r3, [r7, #14]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4a1d      	ldr	r2, [pc, #116]	; (8000778 <TIM_TimeBaseInit+0xd0>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d00c      	beq.n	8000720 <TIM_TimeBaseInit+0x78>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4a1c      	ldr	r2, [pc, #112]	; (800077c <TIM_TimeBaseInit+0xd4>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d008      	beq.n	8000720 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800070e:	89fb      	ldrh	r3, [r7, #14]
 8000710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000714:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	891a      	ldrh	r2, [r3, #8]
 800071a:	89fb      	ldrh	r3, [r7, #14]
 800071c:	4313      	orrs	r3, r2
 800071e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	89fa      	ldrh	r2, [r7, #14]
 8000724:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	685a      	ldr	r2, [r3, #4]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	881a      	ldrh	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <TIM_TimeBaseInit+0xbc>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d003      	beq.n	8000746 <TIM_TimeBaseInit+0x9e>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4a09      	ldr	r2, [pc, #36]	; (8000768 <TIM_TimeBaseInit+0xc0>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d104      	bne.n	8000750 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	7a9b      	ldrb	r3, [r3, #10]
 800074a:	b29a      	uxth	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2201      	movs	r2, #1
 8000754:	829a      	strh	r2, [r3, #20]
}
 8000756:	bf00      	nop
 8000758:	3714      	adds	r7, #20
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40010000 	.word	0x40010000
 8000768:	40010400 	.word	0x40010400
 800076c:	40000400 	.word	0x40000400
 8000770:	40000800 	.word	0x40000800
 8000774:	40000c00 	.word	0x40000c00
 8000778:	40001000 	.word	0x40001000
 800077c:	40001400 	.word	0x40001400

08000780 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800078c:	78fb      	ldrb	r3, [r7, #3]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d008      	beq.n	80007a4 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	b29b      	uxth	r3, r3
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	b29a      	uxth	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80007a2:	e007      	b.n	80007b4 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	f023 0301 	bic.w	r3, r3, #1
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	801a      	strh	r2, [r3, #0]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	807b      	strh	r3, [r7, #2]
 80007cc:	4613      	mov	r3, r2
 80007ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80007d0:	787b      	ldrb	r3, [r7, #1]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d008      	beq.n	80007e8 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	899b      	ldrh	r3, [r3, #12]
 80007da:	b29a      	uxth	r2, r3
 80007dc:	887b      	ldrh	r3, [r7, #2]
 80007de:	4313      	orrs	r3, r2
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80007e6:	e009      	b.n	80007fc <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	899b      	ldrh	r3, [r3, #12]
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	887b      	ldrh	r3, [r7, #2]
 80007f0:	43db      	mvns	r3, r3
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	4013      	ands	r3, r2
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	819a      	strh	r2, [r3, #12]
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000814:	2300      	movs	r3, #0
 8000816:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000818:	2300      	movs	r3, #0
 800081a:	81bb      	strh	r3, [r7, #12]
 800081c:	2300      	movs	r3, #0
 800081e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	8a1b      	ldrh	r3, [r3, #16]
 8000824:	b29a      	uxth	r2, r3
 8000826:	887b      	ldrh	r3, [r7, #2]
 8000828:	4013      	ands	r3, r2
 800082a:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	899b      	ldrh	r3, [r3, #12]
 8000830:	b29a      	uxth	r2, r3
 8000832:	887b      	ldrh	r3, [r7, #2]
 8000834:	4013      	ands	r3, r2
 8000836:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000838:	89bb      	ldrh	r3, [r7, #12]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d005      	beq.n	800084a <TIM_GetITStatus+0x42>
 800083e:	897b      	ldrh	r3, [r7, #10]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d002      	beq.n	800084a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000844:	2301      	movs	r3, #1
 8000846:	73fb      	strb	r3, [r7, #15]
 8000848:	e001      	b.n	800084e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800084a:	2300      	movs	r3, #0
 800084c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800084e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	460b      	mov	r3, r1
 8000866:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000868:	887b      	ldrh	r3, [r7, #2]
 800086a:	43db      	mvns	r3, r3
 800086c:	b29a      	uxth	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	821a      	strh	r2, [r3, #16]
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
	...

08000880 <main>:
enum softwareState {IDLE, INTERRUPT_EXTI, INTERRUPT_TIM3};                                                                     // Software State Enumeration



int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	stSoftware = IDLE;                                                                                                         // Software State Set To IDLE by Default
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <main+0x44>)
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
	INITIALIZE_HARDWARE();                                                                                                     // Initializing Hardware Drivers
 800088a:	f000 f825 	bl	80008d8 <INITIALIZE_HARDWARE>
 while (1)
  {
	 prevState = GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13);                                                                    // Read Button State and Set to Previous
 800088e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000892:	480d      	ldr	r0, [pc, #52]	; (80008c8 <main+0x48>)
 8000894:	f7ff fe2e 	bl	80004f4 <GPIO_ReadInputDataBit>
 8000898:	4603      	mov	r3, r0
 800089a:	461a      	mov	r2, r3
 800089c:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <main+0x4c>)
 800089e:	701a      	strb	r2, [r3, #0]
	 if(buttonState == 0){                                                                                                     // If Button Is Not Pressed
 80008a0:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <main+0x50>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d104      	bne.n	80008b2 <main+0x32>
		 GPIO_ResetBits(GPIOA, GPIO_Pin_5);                                                                                    // Turn LED Off
 80008a8:	2120      	movs	r1, #32
 80008aa:	480a      	ldr	r0, [pc, #40]	; (80008d4 <main+0x54>)
 80008ac:	f7ff fe4b 	bl	8000546 <GPIO_ResetBits>
 80008b0:	e7ed      	b.n	800088e <main+0xe>
	 }
	 else if(buttonState == 1){                                                                                                // If Button Is Pressed
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <main+0x50>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d1e9      	bne.n	800088e <main+0xe>
		 GPIO_SetBits(GPIOA, GPIO_Pin_5);                                                                                      // Turn LED On
 80008ba:	2120      	movs	r1, #32
 80008bc:	4805      	ldr	r0, [pc, #20]	; (80008d4 <main+0x54>)
 80008be:	f7ff fe33 	bl	8000528 <GPIO_SetBits>
	 prevState = GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13);                                                                    // Read Button State and Set to Previous
 80008c2:	e7e4      	b.n	800088e <main+0xe>
 80008c4:	2000001e 	.word	0x2000001e
 80008c8:	40020800 	.word	0x40020800
 80008cc:	2000001c 	.word	0x2000001c
 80008d0:	2000001d 	.word	0x2000001d
 80008d4:	40020000 	.word	0x40020000

080008d8 <INITIALIZE_HARDWARE>:

	 }
  }
}

void INITIALIZE_HARDWARE(void){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08c      	sub	sp, #48	; 0x30
 80008dc:	af00      	add	r7, sp, #0

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOA , ENABLE);                                              // Initializing Clocks of Peripherals to be Used
 80008de:	2101      	movs	r1, #1
 80008e0:	2005      	movs	r0, #5
 80008e2:	f7ff fe3f 	bl	8000564 <RCC_AHB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 80008e6:	2101      	movs	r1, #1
 80008e8:	2002      	movs	r0, #2
 80008ea:	f7ff fe5b 	bl	80005a4 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80008ee:	2101      	movs	r1, #1
 80008f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80008f4:	f7ff fe76 	bl	80005e4 <RCC_APB2PeriphClockCmd>
	NVIC_InitTypeDef NVIC_initStruct;
	NVIC_InitTypeDef NVIC_InitStructure;
	EXTI_InitTypeDef EXTI_initStruct;
	TIM_TimeBaseInitTypeDef TIM_timeBaseInitStruct;

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;                                                                               // LED Output Pin Configuration
 80008f8:	2301      	movs	r3, #1
 80008fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80008fe:	2300      	movs	r3, #0
 8000900:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 8000904:	2320      	movs	r3, #32
 8000906:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 800090e:	2301      	movs	r3, #1
 8000910:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000914:	f107 0320 	add.w	r3, r7, #32
 8000918:	4619      	mov	r1, r3
 800091a:	482e      	ldr	r0, [pc, #184]	; (80009d4 <INITIALIZE_HARDWARE+0xfc>)
 800091c:	f7ff fd5c 	bl	80003d8 <GPIO_Init>

	GPIO_initStruct.GPIO_Mode = GPIO_Mode_IN;                                                                                   // Button Input Pin Configuration
 8000920:	2300      	movs	r3, #0
 8000922:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	GPIO_initStruct.GPIO_OType = GPIO_OType_PP;
 8000926:	2300      	movs	r3, #0
 8000928:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	GPIO_initStruct.GPIO_Pin = GPIO_Pin_13;
 800092c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_initStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000932:	2301      	movs	r3, #1
 8000934:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	GPIO_initStruct.GPIO_Speed = GPIO_Speed_25MHz;
 8000938:	2301      	movs	r3, #1
 800093a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	GPIO_Init(GPIOC, &GPIO_initStruct);
 800093e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000942:	4619      	mov	r1, r3
 8000944:	4824      	ldr	r0, [pc, #144]	; (80009d8 <INITIALIZE_HARDWARE+0x100>)
 8000946:	f7ff fd47 	bl	80003d8 <GPIO_Init>

	TIM_timeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV4;                                                                    // Clock Division = 4  Which means my 24 MHz Clock is Divided by 4. New Clock Speed is 6 MHz
 800094a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800094e:	81bb      	strh	r3, [r7, #12]
	TIM_timeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8000950:	2300      	movs	r3, #0
 8000952:	80fb      	strh	r3, [r7, #6]
	TIM_timeBaseInitStruct.TIM_Period = 25;                                                                                     // An Update Flag will be Generated in Each 25 ms Cycles
 8000954:	2319      	movs	r3, #25
 8000956:	60bb      	str	r3, [r7, #8]
	TIM_timeBaseInitStruct.TIM_Prescaler = 5999;                                                                                // 6 MHz / (Prescaler + 1) = New Clock Speed which is 1 kHz
 8000958:	f241 736f 	movw	r3, #5999	; 0x176f
 800095c:	80bb      	strh	r3, [r7, #4]
	TIM_TimeBaseInit(TIM3, &TIM_timeBaseInitStruct);
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4619      	mov	r1, r3
 8000962:	481e      	ldr	r0, [pc, #120]	; (80009dc <INITIALIZE_HARDWARE+0x104>)
 8000964:	f7ff fea0 	bl	80006a8 <TIM_TimeBaseInit>

	TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);                                                                                  // Update Interrupt Is Enabled
 8000968:	2201      	movs	r2, #1
 800096a:	2101      	movs	r1, #1
 800096c:	481b      	ldr	r0, [pc, #108]	; (80009dc <INITIALIZE_HARDWARE+0x104>)
 800096e:	f7ff ff27 	bl	80007c0 <TIM_ITConfig>

	NVIC_initStruct.NVIC_IRQChannel= EXTI15_10_IRQn;                                                                            // Because my Button Is Connected via PC_13 Pin, EXTI_15_10_IRQ Handler will be Used
 8000972:	2328      	movs	r3, #40	; 0x28
 8000974:	773b      	strb	r3, [r7, #28]
	NVIC_initStruct.NVIC_IRQChannelCmd = ENABLE;																				// NVIC Enabled
 8000976:	2301      	movs	r3, #1
 8000978:	77fb      	strb	r3, [r7, #31]
	NVIC_initStruct.NVIC_IRQChannelPreemptionPriority = 2;                                                                      // Priority Selections (Timer Priority Should Be Higher In Order to Context Switch From EXTI Interrupt)
 800097a:	2302      	movs	r3, #2
 800097c:	777b      	strb	r3, [r7, #29]
	NVIC_initStruct.NVIC_IRQChannelSubPriority = 2;
 800097e:	2302      	movs	r3, #2
 8000980:	77bb      	strb	r3, [r7, #30]
	NVIC_Init(&NVIC_initStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fc1e 	bl	80001c8 <NVIC_Init>

	NVIC_InitStructure.NVIC_IRQChannel= TIM3_IRQn;                                                                              // TIM3 will be Used to Generate a Debounce Timer and TIM3_IRQ Handler will be Used in NVIC
 800098c:	231d      	movs	r3, #29
 800098e:	763b      	strb	r3, [r7, #24]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;																				// NVIC Enabled
 8000990:	2301      	movs	r3, #1
 8000992:	76fb      	strb	r3, [r7, #27]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;																	// Priority Selections (Timer Priority Should Be Higher In Order to Context Switch From EXTI Interrupt to TIM Interrupt)
 8000994:	2301      	movs	r3, #1
 8000996:	767b      	strb	r3, [r7, #25]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8000998:	2301      	movs	r3, #1
 800099a:	76bb      	strb	r3, [r7, #26]
	NVIC_Init(&NVIC_InitStructure);
 800099c:	f107 0318 	add.w	r3, r7, #24
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fc11 	bl	80001c8 <NVIC_Init>

	EXTI_initStruct.EXTI_Line = EXTI_Line13;																					// Because my Button Is Connected via PC_13 Pin, EXTI_Line13 will be Used
 80009a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009aa:	613b      	str	r3, [r7, #16]
	EXTI_initStruct.EXTI_LineCmd = ENABLE;																						// EXTI Line Enabled
 80009ac:	2301      	movs	r3, #1
 80009ae:	75bb      	strb	r3, [r7, #22]
	EXTI_initStruct.EXTI_Mode = EXTI_Mode_Interrupt;																			// Interrupt Mode
 80009b0:	2300      	movs	r3, #0
 80009b2:	753b      	strb	r3, [r7, #20]
	EXTI_initStruct.EXTI_Trigger = EXTI_Trigger_Rising_Falling;                                                                 // We want this interrupt to work both on Rising and Falling Edges of the Button Signal
 80009b4:	2310      	movs	r3, #16
 80009b6:	757b      	strb	r3, [r7, #21]
	EXTI_Init(&EXTI_initStruct);
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fc65 	bl	800028c <EXTI_Init>

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource13);
 80009c2:	210d      	movs	r1, #13
 80009c4:	2002      	movs	r0, #2
 80009c6:	f7ff fe2d 	bl	8000624 <SYSCFG_EXTILineConfig>
}
 80009ca:	bf00      	nop
 80009cc:	3730      	adds	r7, #48	; 0x30
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40020000 	.word	0x40020000
 80009d8:	40020800 	.word	0x40020800
 80009dc:	40000400 	.word	0x40000400

080009e0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line13)){                                                                                          // When EXTI Line is High
 80009e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009e8:	f7ff fcc2 	bl	8000370 <EXTI_GetITStatus>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d02d      	beq.n	8000a4e <EXTI15_10_IRQHandler+0x6e>
		if(!GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13) && prevState == 1){                                                       // Detect Rising Edge
 80009f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f6:	4818      	ldr	r0, [pc, #96]	; (8000a58 <EXTI15_10_IRQHandler+0x78>)
 80009f8:	f7ff fd7c 	bl	80004f4 <GPIO_ReadInputDataBit>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d10e      	bne.n	8000a20 <EXTI15_10_IRQHandler+0x40>
 8000a02:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <EXTI15_10_IRQHandler+0x7c>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d10a      	bne.n	8000a20 <EXTI15_10_IRQHandler+0x40>
			stSoftware = INTERRUPT_EXTI;                                                                                        // Software is now in EXTI_Interrupt
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <EXTI15_10_IRQHandler+0x80>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]
			TIM3->CNT = 0x00000000;                                                                                             // Reset Timer Counter Value
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <EXTI15_10_IRQHandler+0x84>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	; 0x24
			TIM_Cmd(TIM3, ENABLE);                                                                                              // Enable Debounce Timer
 8000a16:	2101      	movs	r1, #1
 8000a18:	4812      	ldr	r0, [pc, #72]	; (8000a64 <EXTI15_10_IRQHandler+0x84>)
 8000a1a:	f7ff feb1 	bl	8000780 <TIM_Cmd>
 8000a1e:	e012      	b.n	8000a46 <EXTI15_10_IRQHandler+0x66>
		}
		else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13) && prevState == 0){                                                   // Detect Falling Edge
 8000a20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a24:	480c      	ldr	r0, [pc, #48]	; (8000a58 <EXTI15_10_IRQHandler+0x78>)
 8000a26:	f7ff fd65 	bl	80004f4 <GPIO_ReadInputDataBit>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d00a      	beq.n	8000a46 <EXTI15_10_IRQHandler+0x66>
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <EXTI15_10_IRQHandler+0x7c>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d106      	bne.n	8000a46 <EXTI15_10_IRQHandler+0x66>
			TIM3->CNT = 0x00000000;                                                                                             // Reset Timer Counter Value
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <EXTI15_10_IRQHandler+0x84>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
			TIM_Cmd(TIM3, ENABLE);                                                                                              // Enable Debounce Timer
 8000a3e:	2101      	movs	r1, #1
 8000a40:	4808      	ldr	r0, [pc, #32]	; (8000a64 <EXTI15_10_IRQHandler+0x84>)
 8000a42:	f7ff fe9d 	bl	8000780 <TIM_Cmd>
		}
		EXTI_ClearITPendingBit(EXTI_Line13);                                                                                    // Exit Interrupt
 8000a46:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a4a:	f7ff fcb5 	bl	80003b8 <EXTI_ClearITPendingBit>
		}
	stSoftware = IDLE;                                                                                                          // Software is now in IDLE
 8000a4e:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <EXTI15_10_IRQHandler+0x80>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40020800 	.word	0x40020800
 8000a5c:	2000001c 	.word	0x2000001c
 8000a60:	2000001e 	.word	0x2000001e
 8000a64:	40000400 	.word	0x40000400

08000a68 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	if(TIM_GetITStatus(TIM3, TIM_IT_Update)){                                                                                   // When Timer Counter == Timer Period (25 ms Elapsed)
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	4812      	ldr	r0, [pc, #72]	; (8000ab8 <TIM3_IRQHandler+0x50>)
 8000a70:	f7ff feca 	bl	8000808 <TIM_GetITStatus>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d014      	beq.n	8000aa4 <TIM3_IRQHandler+0x3c>
		stSoftware = INTERRUPT_TIM3;                                                                                            // Software is now in Timer_Interrupt
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <TIM3_IRQHandler+0x54>)
 8000a7c:	2202      	movs	r2, #2
 8000a7e:	701a      	strb	r2, [r3, #0]
		buttonState = !GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13);                                                               // Read Current State of Button After 25 ms
 8000a80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a84:	480e      	ldr	r0, [pc, #56]	; (8000ac0 <TIM3_IRQHandler+0x58>)
 8000a86:	f7ff fd35 	bl	80004f4 <GPIO_ReadInputDataBit>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	bf0c      	ite	eq
 8000a90:	2301      	moveq	r3, #1
 8000a92:	2300      	movne	r3, #0
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	461a      	mov	r2, r3
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <TIM3_IRQHandler+0x5c>)
 8000a9a:	701a      	strb	r2, [r3, #0]
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);                                                                             // Exit Interrupt
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <TIM3_IRQHandler+0x50>)
 8000aa0:	f7ff fedc 	bl	800085c <TIM_ClearITPendingBit>
	}
	TIM_Cmd(TIM3, DISABLE);                                                                                                     // Disable Timer
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <TIM3_IRQHandler+0x50>)
 8000aa8:	f7ff fe6a 	bl	8000780 <TIM_Cmd>
	stSoftware = IDLE;                                                                                                          // Software is now in IDLE
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <TIM3_IRQHandler+0x54>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40000400 	.word	0x40000400
 8000abc:	2000001e 	.word	0x2000001e
 8000ac0:	40020800 	.word	0x40020800
 8000ac4:	2000001d 	.word	0x2000001d

08000ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000acc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ace:	e003      	b.n	8000ad8 <LoopCopyDataInit>

08000ad0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ad2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ad4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ad6:	3104      	adds	r1, #4

08000ad8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ad8:	480b      	ldr	r0, [pc, #44]	; (8000b08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000adc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ade:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ae0:	d3f6      	bcc.n	8000ad0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ae2:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ae4:	e002      	b.n	8000aec <LoopFillZerobss>

08000ae6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ae6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ae8:	f842 3b04 	str.w	r3, [r2], #4

08000aec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000aee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000af0:	d3f9      	bcc.n	8000ae6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000af2:	f000 f841 	bl	8000b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000af6:	f000 f875 	bl	8000be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afa:	f7ff fec1 	bl	8000880 <main>
  bx  lr    
 8000afe:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b00:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000b04:	08000c4c 	.word	0x08000c4c
  ldr  r0, =_sdata
 8000b08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b0c:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000b10:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000b14:	20000020 	.word	0x20000020

08000b18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC_IRQHandler>

08000b1a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <HardFault_Handler+0x4>

08000b2e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <MemManage_Handler+0x4>

08000b34 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <BusFault_Handler+0x4>

08000b3a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <UsageFault_Handler+0x4>

08000b40 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b7c:	4a16      	ldr	r2, [pc, #88]	; (8000bd8 <SystemInit+0x60>)
 8000b7e:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <SystemInit+0x60>)
 8000b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b8c:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <SystemInit+0x64>)
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <SystemInit+0x64>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b98:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <SystemInit+0x64>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b9e:	4a0f      	ldr	r2, [pc, #60]	; (8000bdc <SystemInit+0x64>)
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <SystemInit+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <SystemInit+0x64>)
 8000bb0:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <SystemInit+0x68>)
 8000bb2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000bb4:	4a09      	ldr	r2, [pc, #36]	; (8000bdc <SystemInit+0x64>)
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <SystemInit+0x64>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bbe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <SystemInit+0x64>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bc6:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <SystemInit+0x60>)
 8000bc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bcc:	609a      	str	r2, [r3, #8]
#endif
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	24003010 	.word	0x24003010

08000be4 <__libc_init_array>:
 8000be4:	b570      	push	{r4, r5, r6, lr}
 8000be6:	4e0d      	ldr	r6, [pc, #52]	; (8000c1c <__libc_init_array+0x38>)
 8000be8:	4c0d      	ldr	r4, [pc, #52]	; (8000c20 <__libc_init_array+0x3c>)
 8000bea:	1ba4      	subs	r4, r4, r6
 8000bec:	10a4      	asrs	r4, r4, #2
 8000bee:	2500      	movs	r5, #0
 8000bf0:	42a5      	cmp	r5, r4
 8000bf2:	d109      	bne.n	8000c08 <__libc_init_array+0x24>
 8000bf4:	4e0b      	ldr	r6, [pc, #44]	; (8000c24 <__libc_init_array+0x40>)
 8000bf6:	4c0c      	ldr	r4, [pc, #48]	; (8000c28 <__libc_init_array+0x44>)
 8000bf8:	f000 f818 	bl	8000c2c <_init>
 8000bfc:	1ba4      	subs	r4, r4, r6
 8000bfe:	10a4      	asrs	r4, r4, #2
 8000c00:	2500      	movs	r5, #0
 8000c02:	42a5      	cmp	r5, r4
 8000c04:	d105      	bne.n	8000c12 <__libc_init_array+0x2e>
 8000c06:	bd70      	pop	{r4, r5, r6, pc}
 8000c08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c0c:	4798      	blx	r3
 8000c0e:	3501      	adds	r5, #1
 8000c10:	e7ee      	b.n	8000bf0 <__libc_init_array+0xc>
 8000c12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c16:	4798      	blx	r3
 8000c18:	3501      	adds	r5, #1
 8000c1a:	e7f2      	b.n	8000c02 <__libc_init_array+0x1e>
 8000c1c:	08000c44 	.word	0x08000c44
 8000c20:	08000c44 	.word	0x08000c44
 8000c24:	08000c44 	.word	0x08000c44
 8000c28:	08000c48 	.word	0x08000c48

08000c2c <_init>:
 8000c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c2e:	bf00      	nop
 8000c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c32:	bc08      	pop	{r3}
 8000c34:	469e      	mov	lr, r3
 8000c36:	4770      	bx	lr

08000c38 <_fini>:
 8000c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c3a:	bf00      	nop
 8000c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c3e:	bc08      	pop	{r3}
 8000c40:	469e      	mov	lr, r3
 8000c42:	4770      	bx	lr
