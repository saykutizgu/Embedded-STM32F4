
TimerInputCapture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c04  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d8c  08000d94  00010d94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000d8c  08000d8c  00010d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000d90  08000d90  00010d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010d94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00010d94  2**0
                  CONTENTS
  7 .bss          00000024  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000024  20000024  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010d94  2**0
                  CONTENTS, READONLY
 10 .debug_info   000043b0  00000000  00000000  00010dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000009d6  00000000  00000000  00015174  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000620  00000000  00000000  00015b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005a8  00000000  00000000  00016170  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001d19  00000000  00000000  00016718  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001f7f  00000000  00000000  00018431  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0001a3b0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001a64  00000000  00000000  0001a42c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0001be90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000d74 	.word	0x08000d74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000d74 	.word	0x08000d74

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f003 031f 	and.w	r3, r3, #31
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000258:	490b      	ldr	r1, [pc, #44]	; (8000288 <NVIC_Init+0xc0>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f003 031f 	and.w	r3, r3, #31
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800028c:	b480      	push	{r7}
 800028e:	b087      	sub	sp, #28
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000296:	2300      	movs	r3, #0
 8000298:	617b      	str	r3, [r7, #20]
 800029a:	2300      	movs	r3, #0
 800029c:	613b      	str	r3, [r7, #16]
 800029e:	2300      	movs	r3, #0
 80002a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]
 80002a6:	e076      	b.n	8000396 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002a8:	2201      	movs	r2, #1
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	fa02 f303 	lsl.w	r3, r2, r3
 80002b0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	681a      	ldr	r2, [r3, #0]
 80002b6:	693b      	ldr	r3, [r7, #16]
 80002b8:	4013      	ands	r3, r2
 80002ba:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80002bc:	68fa      	ldr	r2, [r7, #12]
 80002be:	693b      	ldr	r3, [r7, #16]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	d165      	bne.n	8000390 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681a      	ldr	r2, [r3, #0]
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	005b      	lsls	r3, r3, #1
 80002cc:	2103      	movs	r1, #3
 80002ce:	fa01 f303 	lsl.w	r3, r1, r3
 80002d2:	43db      	mvns	r3, r3
 80002d4:	401a      	ands	r2, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	791b      	ldrb	r3, [r3, #4]
 80002e2:	4619      	mov	r1, r3
 80002e4:	697b      	ldr	r3, [r7, #20]
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	fa01 f303 	lsl.w	r3, r1, r3
 80002ec:	431a      	orrs	r2, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	791b      	ldrb	r3, [r3, #4]
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d003      	beq.n	8000302 <GPIO_Init+0x76>
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	791b      	ldrb	r3, [r3, #4]
 80002fe:	2b02      	cmp	r3, #2
 8000300:	d12e      	bne.n	8000360 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	689a      	ldr	r2, [r3, #8]
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	005b      	lsls	r3, r3, #1
 800030a:	2103      	movs	r1, #3
 800030c:	fa01 f303 	lsl.w	r3, r1, r3
 8000310:	43db      	mvns	r3, r3
 8000312:	401a      	ands	r2, r3
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	689a      	ldr	r2, [r3, #8]
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	795b      	ldrb	r3, [r3, #5]
 8000320:	4619      	mov	r1, r3
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	fa01 f303 	lsl.w	r3, r1, r3
 800032a:	431a      	orrs	r2, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	685a      	ldr	r2, [r3, #4]
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	b29b      	uxth	r3, r3
 8000338:	4619      	mov	r1, r3
 800033a:	2301      	movs	r3, #1
 800033c:	408b      	lsls	r3, r1
 800033e:	43db      	mvns	r3, r3
 8000340:	401a      	ands	r2, r3
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	683a      	ldr	r2, [r7, #0]
 800034c:	7992      	ldrb	r2, [r2, #6]
 800034e:	4611      	mov	r1, r2
 8000350:	697a      	ldr	r2, [r7, #20]
 8000352:	b292      	uxth	r2, r2
 8000354:	fa01 f202 	lsl.w	r2, r1, r2
 8000358:	b292      	uxth	r2, r2
 800035a:	431a      	orrs	r2, r3
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	68da      	ldr	r2, [r3, #12]
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	b29b      	uxth	r3, r3
 8000368:	005b      	lsls	r3, r3, #1
 800036a:	2103      	movs	r1, #3
 800036c:	fa01 f303 	lsl.w	r3, r1, r3
 8000370:	43db      	mvns	r3, r3
 8000372:	401a      	ands	r2, r3
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	68da      	ldr	r2, [r3, #12]
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	79db      	ldrb	r3, [r3, #7]
 8000380:	4619      	mov	r1, r3
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	005b      	lsls	r3, r3, #1
 8000386:	fa01 f303 	lsl.w	r3, r1, r3
 800038a:	431a      	orrs	r2, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	3301      	adds	r3, #1
 8000394:	617b      	str	r3, [r7, #20]
 8000396:	697b      	ldr	r3, [r7, #20]
 8000398:	2b0f      	cmp	r3, #15
 800039a:	d985      	bls.n	80002a8 <GPIO_Init+0x1c>
    }
  }
}
 800039c:	bf00      	nop
 800039e:	371c      	adds	r7, #28
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	695a      	ldr	r2, [r3, #20]
 80003b8:	887b      	ldrh	r3, [r7, #2]
 80003ba:	405a      	eors	r2, r3
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	615a      	str	r2, [r3, #20]
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr

080003cc <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	460b      	mov	r3, r1
 80003d6:	807b      	strh	r3, [r7, #2]
 80003d8:	4613      	mov	r3, r2
 80003da:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80003dc:	2300      	movs	r3, #0
 80003de:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80003e0:	2300      	movs	r3, #0
 80003e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003e4:	787a      	ldrb	r2, [r7, #1]
 80003e6:	887b      	ldrh	r3, [r7, #2]
 80003e8:	f003 0307 	and.w	r3, r3, #7
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	fa02 f303 	lsl.w	r3, r2, r3
 80003f2:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003f4:	887b      	ldrh	r3, [r7, #2]
 80003f6:	08db      	lsrs	r3, r3, #3
 80003f8:	b29b      	uxth	r3, r3
 80003fa:	4618      	mov	r0, r3
 80003fc:	887b      	ldrh	r3, [r7, #2]
 80003fe:	08db      	lsrs	r3, r3, #3
 8000400:	b29b      	uxth	r3, r3
 8000402:	461a      	mov	r2, r3
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	3208      	adds	r2, #8
 8000408:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800040c:	887b      	ldrh	r3, [r7, #2]
 800040e:	f003 0307 	and.w	r3, r3, #7
 8000412:	009b      	lsls	r3, r3, #2
 8000414:	210f      	movs	r1, #15
 8000416:	fa01 f303 	lsl.w	r3, r1, r3
 800041a:	43db      	mvns	r3, r3
 800041c:	ea02 0103 	and.w	r1, r2, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	f100 0208 	add.w	r2, r0, #8
 8000426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800042a:	887b      	ldrh	r3, [r7, #2]
 800042c:	08db      	lsrs	r3, r3, #3
 800042e:	b29b      	uxth	r3, r3
 8000430:	461a      	mov	r2, r3
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	3208      	adds	r2, #8
 8000436:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	4313      	orrs	r3, r2
 800043e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000440:	887b      	ldrh	r3, [r7, #2]
 8000442:	08db      	lsrs	r3, r3, #3
 8000444:	b29b      	uxth	r3, r3
 8000446:	461a      	mov	r2, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	3208      	adds	r2, #8
 800044c:	68b9      	ldr	r1, [r7, #8]
 800044e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000452:	bf00      	nop
 8000454:	3714      	adds	r7, #20
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
	...

08000460 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	460b      	mov	r3, r1
 800046a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800046c:	78fb      	ldrb	r3, [r7, #3]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d006      	beq.n	8000480 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000472:	490a      	ldr	r1, [pc, #40]	; (800049c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000474:	4b09      	ldr	r3, [pc, #36]	; (800049c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4313      	orrs	r3, r2
 800047c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800047e:	e006      	b.n	800048e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000480:	4906      	ldr	r1, [pc, #24]	; (800049c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000482:	4b06      	ldr	r3, [pc, #24]	; (800049c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	43db      	mvns	r3, r3
 800048a:	4013      	ands	r3, r2
 800048c:	630b      	str	r3, [r1, #48]	; 0x30
}
 800048e:	bf00      	nop
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	40023800 	.word	0x40023800

080004a0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	460b      	mov	r3, r1
 80004aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80004ac:	78fb      	ldrb	r3, [r7, #3]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d006      	beq.n	80004c0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80004b2:	490a      	ldr	r1, [pc, #40]	; (80004dc <RCC_APB1PeriphClockCmd+0x3c>)
 80004b4:	4b09      	ldr	r3, [pc, #36]	; (80004dc <RCC_APB1PeriphClockCmd+0x3c>)
 80004b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4313      	orrs	r3, r2
 80004bc:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80004be:	e006      	b.n	80004ce <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80004c0:	4906      	ldr	r1, [pc, #24]	; (80004dc <RCC_APB1PeriphClockCmd+0x3c>)
 80004c2:	4b06      	ldr	r3, [pc, #24]	; (80004dc <RCC_APB1PeriphClockCmd+0x3c>)
 80004c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	43db      	mvns	r3, r3
 80004ca:	4013      	ands	r3, r2
 80004cc:	640b      	str	r3, [r1, #64]	; 0x40
}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40023800 	.word	0x40023800

080004e0 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	881b      	ldrh	r3, [r3, #0]
 80004f2:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4a29      	ldr	r2, [pc, #164]	; (800059c <TIM_TimeBaseInit+0xbc>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d013      	beq.n	8000524 <TIM_TimeBaseInit+0x44>
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4a28      	ldr	r2, [pc, #160]	; (80005a0 <TIM_TimeBaseInit+0xc0>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d00f      	beq.n	8000524 <TIM_TimeBaseInit+0x44>
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800050a:	d00b      	beq.n	8000524 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a25      	ldr	r2, [pc, #148]	; (80005a4 <TIM_TimeBaseInit+0xc4>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d007      	beq.n	8000524 <TIM_TimeBaseInit+0x44>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4a24      	ldr	r2, [pc, #144]	; (80005a8 <TIM_TimeBaseInit+0xc8>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d003      	beq.n	8000524 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4a23      	ldr	r2, [pc, #140]	; (80005ac <TIM_TimeBaseInit+0xcc>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d108      	bne.n	8000536 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000524:	89fb      	ldrh	r3, [r7, #14]
 8000526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800052a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	885a      	ldrh	r2, [r3, #2]
 8000530:	89fb      	ldrh	r3, [r7, #14]
 8000532:	4313      	orrs	r3, r2
 8000534:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4a1d      	ldr	r2, [pc, #116]	; (80005b0 <TIM_TimeBaseInit+0xd0>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d00c      	beq.n	8000558 <TIM_TimeBaseInit+0x78>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a1c      	ldr	r2, [pc, #112]	; (80005b4 <TIM_TimeBaseInit+0xd4>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d008      	beq.n	8000558 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000546:	89fb      	ldrh	r3, [r7, #14]
 8000548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800054c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	891a      	ldrh	r2, [r3, #8]
 8000552:	89fb      	ldrh	r3, [r7, #14]
 8000554:	4313      	orrs	r3, r2
 8000556:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	89fa      	ldrh	r2, [r7, #14]
 800055c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	685a      	ldr	r2, [r3, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	881a      	ldrh	r2, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4a0a      	ldr	r2, [pc, #40]	; (800059c <TIM_TimeBaseInit+0xbc>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d003      	beq.n	800057e <TIM_TimeBaseInit+0x9e>
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4a09      	ldr	r2, [pc, #36]	; (80005a0 <TIM_TimeBaseInit+0xc0>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d104      	bne.n	8000588 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	7a9b      	ldrb	r3, [r3, #10]
 8000582:	b29a      	uxth	r2, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	829a      	strh	r2, [r3, #20]
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40010000 	.word	0x40010000
 80005a0:	40010400 	.word	0x40010400
 80005a4:	40000400 	.word	0x40000400
 80005a8:	40000800 	.word	0x40000800
 80005ac:	40000c00 	.word	0x40000c00
 80005b0:	40001000 	.word	0x40001000
 80005b4:	40001400 	.word	0x40001400

080005b8 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80005dc:	78fb      	ldrb	r3, [r7, #3]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d008      	beq.n	80005f4 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80005f2:	e007      	b.n	8000604 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	f023 0301 	bic.w	r3, r3, #1
 80005fe:	b29a      	uxth	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	801a      	strh	r2, [r3, #0]
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	881b      	ldrh	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d10f      	bne.n	8000642 <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	8859      	ldrh	r1, [r3, #2]
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	889a      	ldrh	r2, [r3, #4]
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	891b      	ldrh	r3, [r3, #8]
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f000 f921 	bl	8000876 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	88db      	ldrh	r3, [r3, #6]
 8000638:	4619      	mov	r1, r3
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f000 f848 	bl	80006d0 <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8000640:	e036      	b.n	80006b0 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	2b04      	cmp	r3, #4
 8000648:	d10f      	bne.n	800066a <TIM_ICInit+0x5a>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	8859      	ldrh	r1, [r3, #2]
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	889a      	ldrh	r2, [r3, #4]
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	891b      	ldrh	r3, [r3, #8]
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f000 f950 	bl	80008fc <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	88db      	ldrh	r3, [r3, #6]
 8000660:	4619      	mov	r1, r3
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f000 f850 	bl	8000708 <TIM_SetIC2Prescaler>
}
 8000668:	e022      	b.n	80006b0 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	2b08      	cmp	r3, #8
 8000670:	d10f      	bne.n	8000692 <TIM_ICInit+0x82>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	8859      	ldrh	r1, [r3, #2]
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	889a      	ldrh	r2, [r3, #4]
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	891b      	ldrh	r3, [r3, #8]
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f000 f989 	bl	8000996 <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	88db      	ldrh	r3, [r3, #6]
 8000688:	4619      	mov	r1, r3
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f000 f85a 	bl	8000744 <TIM_SetIC3Prescaler>
}
 8000690:	e00e      	b.n	80006b0 <TIM_ICInit+0xa0>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	8859      	ldrh	r1, [r3, #2]
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	889a      	ldrh	r2, [r3, #4]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	891b      	ldrh	r3, [r3, #8]
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f000 f9c1 	bl	8000a26 <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	88db      	ldrh	r3, [r3, #6]
 80006a8:	4619      	mov	r1, r3
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f000 f866 	bl	800077c <TIM_SetIC4Prescaler>
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	8b1b      	ldrh	r3, [r3, #24]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	f023 030c 	bic.w	r3, r3, #12
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	8b1b      	ldrh	r3, [r3, #24]
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	887b      	ldrh	r3, [r7, #2]
 80006f4:	4313      	orrs	r3, r2
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	831a      	strh	r2, [r3, #24]
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	8b1b      	ldrh	r3, [r3, #24]
 8000718:	b29b      	uxth	r3, r3
 800071a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800071e:	b29a      	uxth	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	8b1b      	ldrh	r3, [r3, #24]
 8000728:	b29a      	uxth	r2, r3
 800072a:	887b      	ldrh	r3, [r7, #2]
 800072c:	021b      	lsls	r3, r3, #8
 800072e:	b29b      	uxth	r3, r3
 8000730:	4313      	orrs	r3, r2
 8000732:	b29a      	uxth	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	831a      	strh	r2, [r3, #24]
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	460b      	mov	r3, r1
 800074e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	8b9b      	ldrh	r3, [r3, #28]
 8000754:	b29b      	uxth	r3, r3
 8000756:	f023 030c 	bic.w	r3, r3, #12
 800075a:	b29a      	uxth	r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	8b9b      	ldrh	r3, [r3, #28]
 8000764:	b29a      	uxth	r2, r3
 8000766:	887b      	ldrh	r3, [r7, #2]
 8000768:	4313      	orrs	r3, r2
 800076a:	b29a      	uxth	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	839a      	strh	r2, [r3, #28]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	8b9b      	ldrh	r3, [r3, #28]
 800078c:	b29b      	uxth	r3, r3
 800078e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000792:	b29a      	uxth	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	8b9b      	ldrh	r3, [r3, #28]
 800079c:	b29a      	uxth	r2, r3
 800079e:	887b      	ldrh	r3, [r7, #2]
 80007a0:	021b      	lsls	r3, r3, #8
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	4313      	orrs	r3, r2
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	839a      	strh	r2, [r3, #28]
}
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	807b      	strh	r3, [r7, #2]
 80007c4:	4613      	mov	r3, r2
 80007c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80007c8:	787b      	ldrb	r3, [r7, #1]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d008      	beq.n	80007e0 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	899b      	ldrh	r3, [r3, #12]
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	887b      	ldrh	r3, [r7, #2]
 80007d6:	4313      	orrs	r3, r2
 80007d8:	b29a      	uxth	r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80007de:	e009      	b.n	80007f4 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	899b      	ldrh	r3, [r3, #12]
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	887b      	ldrh	r3, [r7, #2]
 80007e8:	43db      	mvns	r3, r3
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	4013      	ands	r3, r2
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	819a      	strh	r2, [r3, #12]
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	460b      	mov	r3, r1
 800080a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800080c:	2300      	movs	r3, #0
 800080e:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000810:	2300      	movs	r3, #0
 8000812:	81bb      	strh	r3, [r7, #12]
 8000814:	2300      	movs	r3, #0
 8000816:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	8a1b      	ldrh	r3, [r3, #16]
 800081c:	b29a      	uxth	r2, r3
 800081e:	887b      	ldrh	r3, [r7, #2]
 8000820:	4013      	ands	r3, r2
 8000822:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	899b      	ldrh	r3, [r3, #12]
 8000828:	b29a      	uxth	r2, r3
 800082a:	887b      	ldrh	r3, [r7, #2]
 800082c:	4013      	ands	r3, r2
 800082e:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000830:	89bb      	ldrh	r3, [r7, #12]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d005      	beq.n	8000842 <TIM_GetITStatus+0x42>
 8000836:	897b      	ldrh	r3, [r7, #10]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d002      	beq.n	8000842 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 800083c:	2301      	movs	r3, #1
 800083e:	73fb      	strb	r3, [r7, #15]
 8000840:	e001      	b.n	8000846 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000846:	7bfb      	ldrb	r3, [r7, #15]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	460b      	mov	r3, r1
 800085e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000860:	887b      	ldrh	r3, [r7, #2]
 8000862:	43db      	mvns	r3, r3
 8000864:	b29a      	uxth	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	821a      	strh	r2, [r3, #16]
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000876:	b480      	push	{r7}
 8000878:	b087      	sub	sp, #28
 800087a:	af00      	add	r7, sp, #0
 800087c:	60f8      	str	r0, [r7, #12]
 800087e:	4608      	mov	r0, r1
 8000880:	4611      	mov	r1, r2
 8000882:	461a      	mov	r2, r3
 8000884:	4603      	mov	r3, r0
 8000886:	817b      	strh	r3, [r7, #10]
 8000888:	460b      	mov	r3, r1
 800088a:	813b      	strh	r3, [r7, #8]
 800088c:	4613      	mov	r3, r2
 800088e:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	82fb      	strh	r3, [r7, #22]
 8000894:	2300      	movs	r3, #0
 8000896:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	8c1b      	ldrh	r3, [r3, #32]
 800089c:	b29b      	uxth	r3, r3
 800089e:	f023 0301 	bic.w	r3, r3, #1
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	8b1b      	ldrh	r3, [r3, #24]
 80008ac:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	8c1b      	ldrh	r3, [r3, #32]
 80008b2:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 80008b4:	8afb      	ldrh	r3, [r7, #22]
 80008b6:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80008ba:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80008bc:	88fb      	ldrh	r3, [r7, #6]
 80008be:	011b      	lsls	r3, r3, #4
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	893b      	ldrh	r3, [r7, #8]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	8afb      	ldrh	r3, [r7, #22]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80008ce:	8abb      	ldrh	r3, [r7, #20]
 80008d0:	f023 030a 	bic.w	r3, r3, #10
 80008d4:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80008d6:	897a      	ldrh	r2, [r7, #10]
 80008d8:	8abb      	ldrh	r3, [r7, #20]
 80008da:	4313      	orrs	r3, r2
 80008dc:	b29b      	uxth	r3, r3
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	8afa      	ldrh	r2, [r7, #22]
 80008e8:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	8aba      	ldrh	r2, [r7, #20]
 80008ee:	841a      	strh	r2, [r3, #32]
}
 80008f0:	bf00      	nop
 80008f2:	371c      	adds	r7, #28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b087      	sub	sp, #28
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	4608      	mov	r0, r1
 8000906:	4611      	mov	r1, r2
 8000908:	461a      	mov	r2, r3
 800090a:	4603      	mov	r3, r0
 800090c:	817b      	strh	r3, [r7, #10]
 800090e:	460b      	mov	r3, r1
 8000910:	813b      	strh	r3, [r7, #8]
 8000912:	4613      	mov	r3, r2
 8000914:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	82fb      	strh	r3, [r7, #22]
 800091a:	2300      	movs	r3, #0
 800091c:	82bb      	strh	r3, [r7, #20]
 800091e:	2300      	movs	r3, #0
 8000920:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	8c1b      	ldrh	r3, [r3, #32]
 8000926:	b29b      	uxth	r3, r3
 8000928:	f023 0310 	bic.w	r3, r3, #16
 800092c:	b29a      	uxth	r2, r3
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	8b1b      	ldrh	r3, [r3, #24]
 8000936:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	8c1b      	ldrh	r3, [r3, #32]
 800093c:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 800093e:	897b      	ldrh	r3, [r7, #10]
 8000940:	011b      	lsls	r3, r3, #4
 8000942:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8000944:	8afb      	ldrh	r3, [r7, #22]
 8000946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800094a:	051b      	lsls	r3, r3, #20
 800094c:	0d1b      	lsrs	r3, r3, #20
 800094e:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8000950:	88fb      	ldrh	r3, [r7, #6]
 8000952:	031b      	lsls	r3, r3, #12
 8000954:	b29a      	uxth	r2, r3
 8000956:	8afb      	ldrh	r3, [r7, #22]
 8000958:	4313      	orrs	r3, r2
 800095a:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800095c:	893b      	ldrh	r3, [r7, #8]
 800095e:	021b      	lsls	r3, r3, #8
 8000960:	b29a      	uxth	r2, r3
 8000962:	8afb      	ldrh	r3, [r7, #22]
 8000964:	4313      	orrs	r3, r2
 8000966:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000968:	8abb      	ldrh	r3, [r7, #20]
 800096a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800096e:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8000970:	8a7a      	ldrh	r2, [r7, #18]
 8000972:	8abb      	ldrh	r3, [r7, #20]
 8000974:	4313      	orrs	r3, r2
 8000976:	b29b      	uxth	r3, r3
 8000978:	f043 0310 	orr.w	r3, r3, #16
 800097c:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	8afa      	ldrh	r2, [r7, #22]
 8000982:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	8aba      	ldrh	r2, [r7, #20]
 8000988:	841a      	strh	r2, [r3, #32]
}
 800098a:	bf00      	nop
 800098c:	371c      	adds	r7, #28
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000996:	b480      	push	{r7}
 8000998:	b087      	sub	sp, #28
 800099a:	af00      	add	r7, sp, #0
 800099c:	60f8      	str	r0, [r7, #12]
 800099e:	4608      	mov	r0, r1
 80009a0:	4611      	mov	r1, r2
 80009a2:	461a      	mov	r2, r3
 80009a4:	4603      	mov	r3, r0
 80009a6:	817b      	strh	r3, [r7, #10]
 80009a8:	460b      	mov	r3, r1
 80009aa:	813b      	strh	r3, [r7, #8]
 80009ac:	4613      	mov	r3, r2
 80009ae:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	82fb      	strh	r3, [r7, #22]
 80009b4:	2300      	movs	r3, #0
 80009b6:	82bb      	strh	r3, [r7, #20]
 80009b8:	2300      	movs	r3, #0
 80009ba:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	8c1b      	ldrh	r3, [r3, #32]
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	8b9b      	ldrh	r3, [r3, #28]
 80009d0:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	8c1b      	ldrh	r3, [r3, #32]
 80009d6:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 80009d8:	897b      	ldrh	r3, [r7, #10]
 80009da:	021b      	lsls	r3, r3, #8
 80009dc:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 80009de:	8afb      	ldrh	r3, [r7, #22]
 80009e0:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80009e4:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80009e6:	88fb      	ldrh	r3, [r7, #6]
 80009e8:	011b      	lsls	r3, r3, #4
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	893b      	ldrh	r3, [r7, #8]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	8afb      	ldrh	r3, [r7, #22]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80009f8:	8abb      	ldrh	r3, [r7, #20]
 80009fa:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80009fe:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8000a00:	8a7a      	ldrh	r2, [r7, #18]
 8000a02:	8abb      	ldrh	r3, [r7, #20]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a0c:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	8afa      	ldrh	r2, [r7, #22]
 8000a12:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	8aba      	ldrh	r2, [r7, #20]
 8000a18:	841a      	strh	r2, [r3, #32]
}
 8000a1a:	bf00      	nop
 8000a1c:	371c      	adds	r7, #28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b087      	sub	sp, #28
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	4608      	mov	r0, r1
 8000a30:	4611      	mov	r1, r2
 8000a32:	461a      	mov	r2, r3
 8000a34:	4603      	mov	r3, r0
 8000a36:	817b      	strh	r3, [r7, #10]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	813b      	strh	r3, [r7, #8]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	82fb      	strh	r3, [r7, #22]
 8000a44:	2300      	movs	r3, #0
 8000a46:	82bb      	strh	r3, [r7, #20]
 8000a48:	2300      	movs	r3, #0
 8000a4a:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	8c1b      	ldrh	r3, [r3, #32]
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	8b9b      	ldrh	r3, [r3, #28]
 8000a60:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	8c1b      	ldrh	r3, [r3, #32]
 8000a66:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8000a68:	897b      	ldrh	r3, [r7, #10]
 8000a6a:	031b      	lsls	r3, r3, #12
 8000a6c:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8000a6e:	8afb      	ldrh	r3, [r7, #22]
 8000a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a74:	051b      	lsls	r3, r3, #20
 8000a76:	0d1b      	lsrs	r3, r3, #20
 8000a78:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8000a7a:	893b      	ldrh	r3, [r7, #8]
 8000a7c:	021b      	lsls	r3, r3, #8
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	8afb      	ldrh	r3, [r7, #22]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8000a86:	88fb      	ldrh	r3, [r7, #6]
 8000a88:	031b      	lsls	r3, r3, #12
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	8afb      	ldrh	r3, [r7, #22]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8000a92:	8abb      	ldrh	r3, [r7, #20]
 8000a94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a98:	045b      	lsls	r3, r3, #17
 8000a9a:	0c5b      	lsrs	r3, r3, #17
 8000a9c:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8000a9e:	8a7a      	ldrh	r2, [r7, #18]
 8000aa0:	8abb      	ldrh	r3, [r7, #20]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aaa:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	8afa      	ldrh	r2, [r7, #22]
 8000ab0:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	8aba      	ldrh	r2, [r7, #20]
 8000ab6:	841a      	strh	r2, [r3, #32]
}
 8000ab8:	bf00      	nop
 8000aba:	371c      	adds	r7, #28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <main>:
uint32_t counter = 0;

static void INITIALIZE_DRIVERS(void);                                               // Function Prototyping

int main(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	INITIALIZE_DRIVERS();                                                           // Initialize Hardware Drivers
 8000ac8:	f000 f80a 	bl	8000ae0 <INITIALIZE_DRIVERS>

  while (1)
  {
		counter = TIM_GetCounter(TIM2);                                             // Read Timer 2 Counter In Each Step
 8000acc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ad0:	f7ff fd72 	bl	80005b8 <TIM_GetCounter>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	4b01      	ldr	r3, [pc, #4]	; (8000adc <main+0x18>)
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	e7f7      	b.n	8000acc <main+0x8>
 8000adc:	20000020 	.word	0x20000020

08000ae0 <INITIALIZE_DRIVERS>:
  }
}

static void INITIALIZE_DRIVERS(void){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08c      	sub	sp, #48	; 0x30
 8000ae4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_initStructure;
	NVIC_InitTypeDef NVIC_InitStruct;
	TIM_ICInitTypeDef TIM_ICInitStruct;
	TIM_TimeBaseInitTypeDef TIM_initStruct;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);                            // Timer 2 Clock Enabled
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f7ff fcd9 	bl	80004a0 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA , ENABLE);                          // GPIOA Clock Enabled
 8000aee:	2101      	movs	r1, #1
 8000af0:	2001      	movs	r0, #1
 8000af2:	f7ff fcb5 	bl	8000460 <RCC_AHB1PeriphClockCmd>

	GPIO_initStructure.GPIO_Mode = GPIO_Mode_OUT;                                   // On-Board LED Pin GPIO Configuration
 8000af6:	2301      	movs	r3, #1
 8000af8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_initStructure.GPIO_OType = GPIO_OType_PP;
 8000afc:	2300      	movs	r3, #0
 8000afe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_initStructure.GPIO_Pin = GPIO_Pin_5;
 8000b02:	2320      	movs	r3, #32
 8000b04:	623b      	str	r3, [r7, #32]
	GPIO_initStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_initStructure.GPIO_Speed = GPIO_Speed_25MHz;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_Init(GPIOA, &GPIO_initStructure);
 8000b12:	f107 0320 	add.w	r3, r7, #32
 8000b16:	4619      	mov	r1, r3
 8000b18:	482c      	ldr	r0, [pc, #176]	; (8000bcc <INITIALIZE_DRIVERS+0xec>)
 8000b1a:	f7ff fbb7 	bl	800028c <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;                                       // Input Capture Pin GPIO Configuration
 8000b1e:	2302      	movs	r3, #2
 8000b20:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000b24:	2300      	movs	r3, #0
 8000b26:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_1;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_25MHz;
 8000b34:	2301      	movs	r3, #1
 8000b36:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4822      	ldr	r0, [pc, #136]	; (8000bcc <INITIALIZE_DRIVERS+0xec>)
 8000b42:	f7ff fba3 	bl	800028c <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_TIM2);                         // Configure Alternate Function Mode For This Pin
 8000b46:	2201      	movs	r2, #1
 8000b48:	2101      	movs	r1, #1
 8000b4a:	4820      	ldr	r0, [pc, #128]	; (8000bcc <INITIALIZE_DRIVERS+0xec>)
 8000b4c:	f7ff fc3e 	bl	80003cc <GPIO_PinAFConfig>

	NVIC_InitStruct.NVIC_IRQChannel = TIM2_IRQn;                                    // Timer 2 Capture/Compare Interrupt Configuration Using NVIC
 8000b50:	231c      	movs	r3, #28
 8000b52:	773b      	strb	r3, [r7, #28]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000b54:	2301      	movs	r3, #1
 8000b56:	77fb      	strb	r3, [r7, #31]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	777b      	strb	r3, [r7, #29]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	77bb      	strb	r3, [r7, #30]

	NVIC_Init(&NVIC_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fb2f 	bl	80001c8 <NVIC_Init>

	TIM_initStruct.TIM_ClockDivision = TIM_CKD_DIV4;                                // Timer 2 TimeBase Configuration
 8000b6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b6e:	81bb      	strh	r3, [r7, #12]
	TIM_initStruct.TIM_CounterMode = TIM_CounterMode_Up;                            // TIM_CKD_DIV4 Results in as a 6 MHz Clock
 8000b70:	2300      	movs	r3, #0
 8000b72:	80fb      	strh	r3, [r7, #6]
	TIM_initStruct.TIM_Period = 999;                                                // Period Value to Obtain 1 Second Period Update Event Interrupt
 8000b74:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000b78:	60bb      	str	r3, [r7, #8]
	TIM_initStruct.TIM_Prescaler = 5999;                                            // 6 MHz / (Prescaler + 1) = 1000 Hz
 8000b7a:	f241 736f 	movw	r3, #5999	; 0x176f
 8000b7e:	80bb      	strh	r3, [r7, #4]
	                                                                                // I Selected 999 as Period Which Means 1000 / (Period + 1) = Clock Update Rate Which is 1 Second
	TIM_TimeBaseInit(TIM2, &TIM_initStruct);
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	4619      	mov	r1, r3
 8000b84:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000b88:	f7ff fcaa 	bl	80004e0 <TIM_TimeBaseInit>

	TIM_ICInitStruct.TIM_Channel = TIM_Channel_2;                                   // Timer 2 Channel 2 Input Capture Mode Configuration
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	823b      	strh	r3, [r7, #16]
	TIM_ICInitStruct.TIM_ICFilter = 0;                                              // No Filtering Needed on Input
 8000b90:	2300      	movs	r3, #0
 8000b92:	833b      	strh	r3, [r7, #24]
    TIM_ICInitStruct.TIM_ICPolarity = TIM_ICPolarity_Rising;                        // I want to Capture Rising Edge of the Input Signal
 8000b94:	2300      	movs	r3, #0
 8000b96:	827b      	strh	r3, [r7, #18]
	TIM_ICInitStruct.TIM_ICPrescaler = TIM_ICPSC_DIV1;                              // No Prescaler Needed on Input
 8000b98:	2300      	movs	r3, #0
 8000b9a:	82fb      	strh	r3, [r7, #22]
	TIM_ICInitStruct.TIM_ICSelection = TIM_ICSelection_DirectTI;                    // DirectTI Mode Which Means Channel 1, 2, 3, 4 are Connected to CC1, CC2, CC3, CC4 Respectively
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	82bb      	strh	r3, [r7, #20]

	TIM_ICInit(TIM2, &TIM_ICInitStruct);
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000baa:	f7ff fd31 	bl	8000610 <TIM_ICInit>
	TIM_ITConfig(TIM2, TIM_IT_CC2, ENABLE);                                         // Timer 2 Channel 2 Capture Compare Interrupt is Enabled
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2104      	movs	r1, #4
 8000bb2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000bb6:	f7ff fdff 	bl	80007b8 <TIM_ITConfig>

	TIM_Cmd(TIM2, ENABLE);                                                          // Start Timer 2
 8000bba:	2101      	movs	r1, #1
 8000bbc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000bc0:	f7ff fd06 	bl	80005d0 <TIM_Cmd>

}
 8000bc4:	bf00      	nop
 8000bc6:	3730      	adds	r7, #48	; 0x30
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40020000 	.word	0x40020000

08000bd0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0

	if(TIM_GetITStatus(TIM2, TIM_IT_CC2)){                                          // When the Input Capture Pin of Timer 2 Detected a Rising Edge
 8000bd4:	2104      	movs	r1, #4
 8000bd6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000bda:	f7ff fe11 	bl	8000800 <TIM_GetITStatus>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d00f      	beq.n	8000c04 <TIM2_IRQHandler+0x34>

		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);                                         // Toggle On-Board LED
 8000be4:	2120      	movs	r1, #32
 8000be6:	4808      	ldr	r0, [pc, #32]	; (8000c08 <TIM2_IRQHandler+0x38>)
 8000be8:	f7ff fbde 	bl	80003a8 <GPIO_ToggleBits>
		capture = TIM_GetCapture2(TIM2);                                            // Measure Current Timer Counter
 8000bec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000bf0:	f7ff fd62 	bl	80006b8 <TIM_GetCapture2>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <TIM2_IRQHandler+0x3c>)
 8000bf8:	601a      	str	r2, [r3, #0]

		TIM_ClearITPendingBit(TIM2, TIM_IT_CC2);                                    // Exit Interrupt
 8000bfa:	2104      	movs	r1, #4
 8000bfc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c00:	f7ff fe28 	bl	8000854 <TIM_ClearITPendingBit>
	}
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40020000 	.word	0x40020000
 8000c0c:	2000001c 	.word	0x2000001c

08000c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c16:	e003      	b.n	8000c20 <LoopCopyDataInit>

08000c18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c1e:	3104      	adds	r1, #4

08000c20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c20:	480b      	ldr	r0, [pc, #44]	; (8000c50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c28:	d3f6      	bcc.n	8000c18 <CopyDataInit>
  ldr  r2, =_sbss
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c2c:	e002      	b.n	8000c34 <LoopFillZerobss>

08000c2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c30:	f842 3b04 	str.w	r3, [r2], #4

08000c34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c38:	d3f9      	bcc.n	8000c2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c3a:	f000 f841 	bl	8000cc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3e:	f000 f875 	bl	8000d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c42:	f7ff ff3f 	bl	8000ac4 <main>
  bx  lr    
 8000c46:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c48:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000c4c:	08000d94 	.word	0x08000d94
  ldr  r0, =_sdata
 8000c50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c54:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000c58:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000c5c:	20000024 	.word	0x20000024

08000c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC_IRQHandler>

08000c62 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <HardFault_Handler+0x4>

08000c76 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <MemManage_Handler+0x4>

08000c7c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <BusFault_Handler+0x4>

08000c82 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <UsageFault_Handler+0x4>

08000c88 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc4:	4a16      	ldr	r2, [pc, #88]	; (8000d20 <SystemInit+0x60>)
 8000cc6:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <SystemInit+0x60>)
 8000cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000cd4:	4a13      	ldr	r2, [pc, #76]	; (8000d24 <SystemInit+0x64>)
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <SystemInit+0x64>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ce0:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <SystemInit+0x64>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ce6:	4a0f      	ldr	r2, [pc, #60]	; (8000d24 <SystemInit+0x64>)
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <SystemInit+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cf4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <SystemInit+0x64>)
 8000cf8:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <SystemInit+0x68>)
 8000cfa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000cfc:	4a09      	ldr	r2, [pc, #36]	; (8000d24 <SystemInit+0x64>)
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <SystemInit+0x64>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <SystemInit+0x64>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d0e:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <SystemInit+0x60>)
 8000d10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d14:	609a      	str	r2, [r3, #8]
#endif
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00
 8000d24:	40023800 	.word	0x40023800
 8000d28:	24003010 	.word	0x24003010

08000d2c <__libc_init_array>:
 8000d2c:	b570      	push	{r4, r5, r6, lr}
 8000d2e:	4e0d      	ldr	r6, [pc, #52]	; (8000d64 <__libc_init_array+0x38>)
 8000d30:	4c0d      	ldr	r4, [pc, #52]	; (8000d68 <__libc_init_array+0x3c>)
 8000d32:	1ba4      	subs	r4, r4, r6
 8000d34:	10a4      	asrs	r4, r4, #2
 8000d36:	2500      	movs	r5, #0
 8000d38:	42a5      	cmp	r5, r4
 8000d3a:	d109      	bne.n	8000d50 <__libc_init_array+0x24>
 8000d3c:	4e0b      	ldr	r6, [pc, #44]	; (8000d6c <__libc_init_array+0x40>)
 8000d3e:	4c0c      	ldr	r4, [pc, #48]	; (8000d70 <__libc_init_array+0x44>)
 8000d40:	f000 f818 	bl	8000d74 <_init>
 8000d44:	1ba4      	subs	r4, r4, r6
 8000d46:	10a4      	asrs	r4, r4, #2
 8000d48:	2500      	movs	r5, #0
 8000d4a:	42a5      	cmp	r5, r4
 8000d4c:	d105      	bne.n	8000d5a <__libc_init_array+0x2e>
 8000d4e:	bd70      	pop	{r4, r5, r6, pc}
 8000d50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d54:	4798      	blx	r3
 8000d56:	3501      	adds	r5, #1
 8000d58:	e7ee      	b.n	8000d38 <__libc_init_array+0xc>
 8000d5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d5e:	4798      	blx	r3
 8000d60:	3501      	adds	r5, #1
 8000d62:	e7f2      	b.n	8000d4a <__libc_init_array+0x1e>
 8000d64:	08000d8c 	.word	0x08000d8c
 8000d68:	08000d8c 	.word	0x08000d8c
 8000d6c:	08000d8c 	.word	0x08000d8c
 8000d70:	08000d90 	.word	0x08000d90

08000d74 <_init>:
 8000d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d76:	bf00      	nop
 8000d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d7a:	bc08      	pop	{r3}
 8000d7c:	469e      	mov	lr, r3
 8000d7e:	4770      	bx	lr

08000d80 <_fini>:
 8000d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d82:	bf00      	nop
 8000d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d86:	bc08      	pop	{r3}
 8000d88:	469e      	mov	lr, r3
 8000d8a:	4770      	bx	lr
